[
 {
  "docstatus": 0, 
  "doctype": "Custom Script", 
  "dt": "Offer Letter", 
  "modified": "2018-11-26 10:46:12.856642", 
  "name": "Offer Letter-Client", 
  "script": "frappe.ui.form.on(\"Offer Letter\", {\n validate: function(frm){\n  frm.set_value(\"gross\", (frm.doc.basic+frm.doc.hra+frm.doc.sa+frm.doc.ea+frm.doc.food_allowance));\n},\noffer_date: function(frm){\n    frappe.call({\n\t\"method\":\"frappe.client.get\",\n\targs: {\n\tdoctype: \"Job Applicant\",\n\tname: frm.doc.job_applicant\n\t},\n        callback: function(r){\n            frappe.call({\n\t    \"method\":\"frappe.client.get\",\n\t     args: {\n\t     doctype: \"Job Opening\",\n\t     name: r.message.job_title\n\t     },\n             callback: function(r){\n                var from_date = new Date(r.message.mrf_received);\n                var to_date = new Date(frm.doc.offer_date);\n                var diff_days = to_date.getDate()- from_date.getDate();\n                frm.set_value(\"tat\",diff_days)\n             }\n            })\n       }\n    })\n   }\n});", 
  "script_type": "Client"
 }, 
 {
  "docstatus": 0, 
  "doctype": "Custom Script", 
  "dt": "Job Applicant", 
  "modified": "2019-06-20 18:34:03.400104", 
  "name": "Job Applicant-Client", 
  "script": "cur_frm.cscript.interviewer= function (doc, cdt, cdn) {\n\tvar d = locals[cdt][cdn];\n\tif (d.interviewer) {\t\n\t\tvar total = flt(d.weightage * d.interviewer) / 100;\n\t\td.weighted_score = total.toPrecision(2);\n\t\trefresh_field('weighted_score', d.name, 'personal_qualities');\n\t}\t\n}\nfrappe.ui.form.on(\"Job Applicant\",{\ninterviewer_code: function(frm){\nfrappe.call({\n\"method\": \"frappe.client.get\",\nargs:{\n\"doctype\": \"Employee\",\nfilters:{\n\"user_id\": frm.doc.interviewer_code\n}\n},\ncallback: function(r){\nif(r.message){\nfrm.set_value(\"interviewer_name\",r.message.employee_name)\nfrm.set_value(\"interviewer_designation\",r.message.designation)\nfrm.set_value(\"interviewer_department\",r.message.department)\n}\n}\n})\n},\ninterviewer_code_1: function(frm){\nfrappe.call({\n\"method\": \"frappe.client.get\",\nargs:{\n\"doctype\": \"Employee\",\nfilters:{\n\"user_id\": frm.doc.interviewer_code_1\n}\n},\ncallback: function(r){\nif(r.message){\nfrm.set_value(\"interviewer_name_1\",r.message.employee_name)\nfrm.set_value(\"interviewer_designation_1\",r.message.designation)\nfrm.set_value(\"interviewer_department_1\",r.message.department)\n}\n}\n})\n},\ninterviewer_code_2: function(frm){\nfrappe.call({\n\"method\": \"frappe.client.get\",\nargs:{\n\"doctype\": \"Employee\",\nfilters:{\n\"user_id\": frm.doc.interviewer_code_2\n}\n},\ncallback: function(r){\nif(r.message){\nfrm.set_value(\"interviewer_name_2\",r.message.employee_name)\nfrm.set_value(\"interviewer_designation_2\",r.message.designation)\nfrm.set_value(\"interviewer_department_2\",r.message.department)\n}\n}\n})\n},\nvalidate: function(frm){\nvar total = frm.doc.present_basic + frm.doc.present_hra+frm.doc.present_conveyance+frm.doc.present_edu+frm.doc.present_medical+frm.doc.present_food_allowance+frm.doc.allowance_1+frm.doc.allowance_2+frm.doc.present_pf+frm.doc.present_bonus\nvar annual = total * 12\nfrm.set_value(\"fixed_ctc\",total)\nvar variable_pay = frm.doc.present_incentive + frm.doc.present_kpi_linked_incetive+frm.doc.present_gratuity\nfrm.set_value(\"variable_ctc\",(variable_pay * 12))\n}\n})\n\n\n\n", 
  "script_type": "Client"
 }, 
 {
  "docstatus": 0, 
  "doctype": "Custom Script", 
  "dt": "Announcements", 
  "modified": "2018-11-16 11:42:59.365910", 
  "name": "Announcements-Client", 
  "script": "frappe.ui.form.on(\"Announcements\",{\n\tvalidate:function(frm){\n\t\tif(frm.doc.announce){\n\t\t\tfrappe.call({\n\t\t\t\tmethod:'hunter_douglas.custom.display_announcement',\n\t\t\t\targs:{\n\t\t\t\t'note':frm.doc.note,\n\t\t\t\t'announcement':frm.doc.name\n\t\t\t\t\t},\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t});", 
  "script_type": "Client"
 }, 
 {
  "docstatus": 0, 
  "doctype": "Custom Script", 
  "dt": "Movement Register", 
  "modified": "2019-03-16 12:50:36.021843", 
  "name": "Attendance Permission-Client", 
  "script": "frappe.ui.form.on(\"Movement Register\", {\nafter_save:function(frm){\nif(frm.doc.is_from_ar == \"Yes\"){\n               frappe.msgprint(__(\"Movement Register Applied Successfully!!!\"))\n               frappe.set_route(\"query-report\",\"Attendance recapitulation\")\n        } else {\n                frappe.msgprint(__(\"Movement Register Applied Successfully!!!\"))\n     \t\tsetTimeout(function () { window.history.back(); }, 1000);\n        }\n  \n},\napprover: function(frm) {\n\t\tif(frm.doc.approver){\n\t\t\tfrm.set_value(\"approver_name\", frappe.user.full_name(frm.doc.approver));\n                 \n\t\t}else{\n                  frm.set_value(\"approver_name\",\"\");\n               }\n\t},\nrefresh:function(frm){\n     if(frm.doc.approver != frappe.session.user){\n     frm.set_df_property(\"status\", \"read_only\",frm.doc.__islocal);\t\n     frm.set_df_property(\"status\", \"read_only\",!frm.doc.__islocal);\n     }\n\t},\nonload:function(frm){\n        if(frm.doc.__islocal){\n\t   frm.set_value(\"status\",\"Open\"),\n            frappe.call({\n                method: \"frappe.client.get_value\",\n                args: {\n                    doctype: \"Employee\",\n                    filters: {\"user_id\": frappe.session.user},\n                    fieldname: [\"name\",\"employee_name\",\"grade\",\"location_name\",\"department\",\"business_unit\"]\n                },\n                callback: function(r){\n                    if(r.message){\n                        //var la = r.message.leave_approvers\n                        //console.log(r.message.leave_approvers)\n                        frm.set_value(\"employee\",r.message.name);\n                        frm.set_value(\"employee_name\",r.message.employee_name);\n\t\t\tfrm.set_value(\"grade\",r.message.grade);\n                        frm.set_value(\"location\",r.message.location_name);\n\t\t\tfrm.set_value(\"department\",r.message.department);\n                        frm.set_value(\"business_unit\",r.message.business_unit);\n\t\t\tfrm.set_value(\"category\",r.message.category);\n\t\t\tfrappe.call({\n        \t\tmethod: 'frappe.client.get',\n        \t\targs: {\n           \t\t \tdoctype: 'Employee',\n            \t\t\tname: frm.doc.employee\n       \t\t\t\t },\n       \t\t\tcallback: function(r) {\n          \t\t\t var LA = r.message.leave_approvers\n\t   \t\t\t frm.set_value(\"approver\",LA[0].leave_approver)\n       \t\t\t\t}\n      \t\t}) \n\t\t\t\n                        }\n    }\n    });\n    }\n    },\nto_time:function(frm){\nfrm.trigger(\"total_hours\")\n},\nvalidate: function(frm){\nif(frappe.session.user == 'hr.hdi@hunterdouglas.asia'){\n         frm.set_value(\"status\",\"Approved\");\n    }else {\n        frm.set_value(\"status\",\"Applied\");\n\t\n    }\nfrm.trigger(\"total_hours\")\n},\ntotal_hours: function(frm){\nvar from_time = new Date(frm.doc.from_time)\nvar to_time = new Date(frm.doc.to_time)\nvar time_diff = (to_time - from_time)\nvar hours =( (time_diff) / 3600000  )\nif (hours > 6){\nfrappe.msgprint(\"Advice to use On Duty Application\");\n        validated = false;\n}\nelse if (hours > 0){\nfrm.set_value(\"total_permission_hour\",hours)\n} else {\nvalidated = false\nfrm.set_value(\"total_permission_hour\",\"\")\nfrappe.throw(\"From Time Cannot be Greater than To Time\")\n}\n}\n});\n", 
  "script_type": "Client"
 }, 
 {
  "docstatus": 0, 
  "doctype": "Custom Script", 
  "dt": "On Duty Application", 
  "modified": "2019-04-04 12:59:25.702092", 
  "name": "OnDuty Application-Client", 
  "script": "frappe.ui.form.on(\"On Duty Application\", {\n    after_save: function (frm) {\n        if(frm.doc.is_from_ar == \"Yes\"){\n               frappe.set_route(\"query-report\",\"Attendance recapitulation\")\n        } else {\n     \t\t//setTimeout(function () { window.history.back(); }, 1000);\n        }\n        if (frm.doc.status != 'Approved') {\n            frappe.msgprint(__(\"On Duty Applied Successfully!!!\"))\n        }\n    },\n    approver: function (frm) {\n        if (frm.doc.approver) {\n            frm.set_value(\"approver_name\", frappe.user.full_name(frm.doc.approver));\n        } else {\n            frm.set_value(\"approver_name\", \"\");\n        }\n    },\n    refresh: function (frm) {\n        if (frm.doc.approver != frappe.session.user) {\n            frm.set_df_property(\"status\", \"read_only\", frm.doc.__islocal);\n            frm.set_df_property(\"status\", \"read_only\", !frm.doc.__islocal);\n        }\n        if (frm.doc.from_date != frm.doc.to_date) {\n            frm.trigger(\"session_field\")\n        }\n    },\n\n\n    onload: function (frm) {\n        if (frm.doc.__islocal) {\n            frm.set_value(\"status\", \"Open\");\n            frappe.call({\n                method: \"frappe.client.get_value\",\n                args: {\n                    doctype: \"Employee\",\n                    filters: { \"user_id\": frappe.session.user },\n                    fieldname: [\"name\", \"employee_name\", \"grade\", \"location_name\", \"department_code\", \"business_unit\"]\n                },\n                callback: function (r) {\n                    if (r.message) {\n                        //var la = r.message.leave_approvers\n                        //console.log(r.message.employee_name)\n                        frm.set_value(\"employee\", r.message.name);\n                        frm.set_value(\"employee_name\", r.message.employee_name);\n                        frm.set_value(\"grade\", r.message.grade);\n                        frm.set_value(\"location\", r.message.location_name);\n                        frm.set_value(\"department\", r.message.department_code);\n                        frm.set_value(\"business_unit\", r.message.business_unit);\n                        frm.set_value(\"category\", r.message.category);\n                        frappe.call({\n                            method: 'frappe.client.get',\n                            args: {\n                                doctype: 'Employee',\n                                name: frm.doc.employee\n                            },\n                            callback: function (r) {\n                                var LA = r.message.leave_approvers\n                                frm.set_value(\"approver\", LA[0].leave_approver)\n                            }\n                        })\n\n                    }\n                }\n            });\n        }\n    },\n\n    validate: function (frm) {\nif(frappe.session.user == 'hr.hdi@hunterdouglas.asia'){\n         frm.set_value(\"status\",\"Approved\");\n    }else if(frm.doc.approver != frappe.session.user){\n        frm.set_value(\"status\",\"Applied\");\n\t\n    }\n        if (frm.doc.from_date == frm.doc.to_date) {\n            if ((frm.doc.from_date_session == \"First Half\") || (frm.doc.from_date_session == \"Second Half\")) {\n                frm.set_value(\"half_day\", \"1\")\n                frm.set_value(\"half_day_date\", frm.doc.from_date)\n            }\n        } else {\n            if ((frm.doc.from_date_session == \"Full Day\") && (frm.doc.to_date_session == \"First Half\")) {\n                frm.set_value(\"half_day\", \"1\")\n                frm.set_value(\"half_day_date\", frm.doc.to_date)\n            } else if ((frm.doc.from_date_session == \"Second Half\") && (frm.doc.to_date_session == \"Full Day\")) {\n                frm.set_value(\"half_day\", \"1\")\n                frm.set_value(\"half_day_date\", frm.doc.from_date)\n            }\n        }\n    },\n    from_date: function (frm) {\n        frm.trigger(\"session_refresh\")\n    },\n    to_date: function (frm) {\n        frm.trigger(\"session_refresh\")\n        //if(frm.doc.from_date != frm.doc.to_date){\n        frm.trigger(\"session_field\")\n        //}\n    },\n    session_refresh: function (frm) {\n        frm.set_value(\"from_date_session\", \"Full Day\")\n        frm.set_value(\"to_date_session\", \"Full Day\")\n    },\n    session_field: function (frm) {\n        if (frm.doc.from_date == frm.doc.to_date) {\n            frm.fields_dict.from_date_session.df.options = ['Full Day', 'First Half', 'Second Half'].join('\\n')\n        } else if (frm.doc.from_date != frm.doc.to_date) {\n            frm.fields_dict.from_date_session.df.options = ['Full Day', 'Second Half'].join('\\n')\n            frm.fields_dict.to_date_session.df.options = ['Full Day', 'First Half'].join('\\n')\n        }\n        refresh_field(\"from_date_session\");\n        refresh_field(\"to_date_session\");\n    },\n    employee: function (frm) {\n        if (frappe.user.has_role(\"System Manager\")) {\n            frappe.call({\n                method: \"frappe.client.get_value\",\n                args: {\n                    doctype: \"Employee\",\n                    filters: { \"employee_number\": frm.doc.employee },\n                    fieldname: [\"name\", \"employee_name\", \"grade\", \"location_name\", \"department_code\", \"business_unit\"]\n                },\n                callback: function (r) {\n                    if (r.message) {\n                        //var la = r.message.leave_approvers\n                        //console.log(r.message.employee_name)\n                        frm.set_value(\"employee\", r.message.name);\n                        frm.set_value(\"employee_name\", r.message.employee_name);\n                        frm.set_value(\"grade\", r.message.grade);\n                        frm.set_value(\"location\", r.message.location_name);\n                        frm.set_value(\"department\", r.message.department_code);\n                        frm.set_value(\"business_unit\", r.message.business_unit);\n                        frm.set_value(\"category\", r.message.category);\n                        frappe.call({\n                            method: 'frappe.client.get',\n                            args: {\n                                doctype: 'Employee',\n                                name: frm.doc.employee\n                            },\n                            callback: function (r) {\n                                var LA = r.message.leave_approvers\n                                frm.set_value(\"approver\", LA[0].leave_approver)\n                            }\n                        })\n\n                    }\n                }\n            });\n        }\n    }\n\n});\n", 
  "script_type": "Client"
 }, 
 {
  "docstatus": 0, 
  "doctype": "Custom Script", 
  "dt": "Travel Management", 
  "modified": "2019-11-11 11:33:35.771368", 
  "name": "Tour Management-Client", 
  "script": "frappe.ui.form.on(\"Travel Management\", {\n    after_save: function (frm) {\n        if (frm.doc.status != 'Approved') {\n            frappe.msgprint(__(\"Travel Application Applied Successfully!!!\"))\n            frappe.route_options = {\n                \"employee\": frm.doc.employee\n            }\n            frappe.set_route(\"List\", \"Travel Management\")\n        }\n    },\n    ticket_booked: function (frm) {\n        frm.save_or_update()\n    },\n\n    approver: function (frm) {\n        if (frm.doc.approver) {\n            frm.set_value(\"approver_name\", frappe.user.full_name(frm.doc.approver));\n\n        } else {\n            frm.set_value(\"approver_name\", \"\");\n        }\n    },\n\n    validate: function (frm) {\n        if (frm.doc.travel_advance > frm.doc.defined_travel_advance) {\n            msgprint(\"You cannot able to request amount greater than defined amount \");\n            validated = false;\n        }\n        if (frm.doc.employee == frappe.session.user) {\n            frm.set_value(\"status\", \"Applied\")\n        }\n        if (frm.doc.ticket_request_date) {\n            var date = new Date(frm.doc.from_date)\n            var pre_date = date.getDate() - 1\n            var f_date = new Date(frm.doc.ticket_request_date)\n            var fm_date = f_date.getDate()\n            if (((frm.doc.ticket_request_date >= frm.doc.from_date) || (fm_date == pre_date)) && (frm.doc.ticket_request_date <= frm.doc.to_date)) {\n            } else {\n                frappe.msgprint(\"Ticket Request Date must be in-between From-date and To-date\");\n                validated = false;\n            }\n        }\n        if (frm.doc.ticket_request_date_r) {\n            if ((frm.doc.ticket_request_date_r >= frm.doc.from_date) && (frm.doc.ticket_request_date_r <= frm.doc.to_date)) {\n            } else {\n                frappe.msgprint(\"Ticket Request Date must be in-between From-date and To-date\");\n                validated = false;\n            }\n        }\n    },\n    tour_type: function (frm) {\n        if (frm.doc.tour_type === 'International') {\n            frm.set_df_property('mode_of_travel', 'options', ['AIR']);\n            frm.refresh_field('mode_of_travel');\n        }\n        else {\n            frm.set_df_property('mode_of_travel', 'options', ['AIR', 'TRAIN', 'BUS', 'CAR']);\n            frm.refresh_field('mode_of_travel');\n        }\n    },\n    mode_of_travel: function (frm) {\n        frm.trigger(\"session_refresh\")\n        // frm.set_value(\"ticket_request_date\", frappe.datetime.nowdate())\n        // frm.set_value(\"ticket_request_date_r\", frappe.datetime.nowdate())\n        refresh_field(\"ticket_booking\");\n        if (frm.doc.mode_of_travel == \"BUS\" || frm.doc.mode_of_travel == \"CAR\") {\n            frm.set_value(\"ticket_booking\", \"Travel Desk\");\n            frm.set_df_property(\"ticket_booking\", \"read_only\", 0);\n        }\n        else if (frm.doc.mode_of_travel == \"TRAIN\") {\n            frm.set_value(\"ticket_booking\", \"Travel Desk\");\n            frm.set_df_property(\"ticket_booking\", \"read_only\", 0);\n        }\n        else {\n            frm.set_value(\"ticket_booking\", \"Travel Desk\")\n            frm.set_df_property(\"ticket_booking\", \"read_only\", 1);\n\n        }\n    },\n    refresh: function (frm) {\n\n\n        if (frm.doc.ticket_booked) {\n            frm.add_custom_button(__(\"Ticket Booked\")).addClass('btn btn-success');\n        }\n        if (frm.doc.approver != frappe.session.user) {\n            frm.set_df_property(\"status\", \"read_only\", frm.doc.__islocal);\n            frm.set_df_property(\"status\", \"read_only\", !frm.doc.__islocal);\n        }\n        if (frm.doc.__islocal) {\n            frm.set_value(\"status\", \"Open\")\n        }\n        if (frm.doc.from_date != frm.doc.to_date) {\n            frm.trigger(\"session_field\")\n        }\n    },\n\n    onload: function (frm) {\n        if (!frm.doc.__islocal) {\n            frappe.db.get_value('Employee', frm.doc.employee, 'user_id')\n                .then(r => {\n                    var uid = r.message.user_id\n                    if (frm.doc.docstatus == 1 && frm.doc.status == 'Approved' ) {\n                        frm.add_custom_button(__(\"Expense Claim\"), function () {\n                         \n                                frappe.db.get_value('Expense Claim', { travel_management_id: frm.doc.name }, 'name')\n                                    .then(r => {\n                                        if (r.message) {\n                                            frappe.set_route(\"Form\", \"Expense Claim\", r.message.name)\n                                        }\n                                        else {\n                                            frappe.set_route(\"Form\", \"Expense Claim\", \"New Expense Claim 1\", {\n                                                \"travel_management_id\": frm.doc.name,\n                                            })\n                                        }\n                                    })\n                        })\n                    }\n                })\n        }\n        if (frm.doc.__islocal) {\n            frm.set_value(\"status\", \"Open\"),\n                frappe.call({\n                    method: \"frappe.client.get_value\",\n                    args: {\n                        doctype: \"Employee\",\n                        filters: { \"user_id\": frappe.session.user },\n                        fieldname: [\"name\", \"employee_name\", \"grade\", \"location_name\", \"department\", \"business_unit\"]\n                    },\n                    callback: function (r) {\n                        if (r.message) {\n                            //var la = r.message.leave_approvers\n                            frm.set_value(\"employee\", r.message.name);\n                            frm.set_value(\"employee_name\", r.message.employee_name);\n                            frm.set_value(\"grade\", r.message.grade);\n                            frm.set_value(\"location\", r.message.location_name);\n                            frm.set_value(\"department\", r.message.department);\n                            frm.set_value(\"business_unit\", r.message.business_unit);\n                            frm.set_value(\"category\", r.message.category);\n                            frappe.call({\n                                method: 'frappe.client.get',\n                                args: {\n                                    doctype: 'Employee',\n                                    name: frm.doc.employee\n                                },\n                                callback: function (r) {\n                                    var LA = r.message.leave_approvers\n                                    frm.set_value(\"approver\", LA[0].leave_approver)\n                                }\n                            })\n\n                        }\n                    }\n                });\n        }\n    },\n    grade: function (frm) {\n        frappe.call({\n            method: 'frappe.client.get_value',\n            args: {\n                'doctype': 'Grade',\n                'filters': { 'name': frm.doc.grade },\n                'fieldname': ['travel_advance']\n            },\n            callback: function (r) {\n                if (r.message) {\n                    frm.set_value(\"defined_travel_advance\", r.message.travel_advance)\n                } else {\n                    frm.set_value(\"defined_travel_advance\", \"\")\n                }\n            },\n        })\n    },\n    from_place: function (frm) {\n        if (frm.doc.trip_type == 'Round Trip') {\n            frm.set_value(\"to_place_round\", frm.doc.from_place)\n        }\n\n    },\n    to_place: function (frm) {\n        if (frm.doc.trip_type == 'Round Trip') {\n            frm.set_value(\"from_place_round\", frm.doc.to_place)\n        }\n\n    },\n    from_date: function (frm) {\n        frm.trigger(\"session_refresh\")\n    },\n    to_date: function (frm) {\n        frm.trigger(\"session_refresh\")\n        frm.trigger(\"session_field\")\n    },\n    session_refresh: function (frm) {\n        frm.set_value(\"from_date_session\", \"Full Day\")\n        frm.set_value(\"to_date_session\", \"Full Day\")\n        frm.set_value(\"ticket_request_date\", frm.doc.from_date)\n        frm.set_value(\"ticket_request_date_r\", frm.doc.to_date)\n    },\n    session_field: function (frm) {\n        if (frm.doc.from_date == frm.doc.to_date) {\n            frm.fields_dict.from_date_session.df.options = ['Full Day', 'First Half', 'Second Half'].join('\\n')\n        }\n        if (frm.doc.from_date != frm.doc.to_date) {\n            frm.fields_dict.from_date_session.df.options = ['Full Day', 'Second Half'].join('\\n')\n            frm.fields_dict.to_date_session.df.options = ['Full Day', 'First Half'].join('\\n')\n        }\n        refresh_field(\"from_date_session\");\n        refresh_field(\"to_date_session\");\n    }\n});\n\n", 
  "script_type": "Client"
 }, 
 {
  "docstatus": 0, 
  "doctype": "Custom Script", 
  "dt": "Expense Claim", 
  "modified": "2020-02-18 13:14:08.100717", 
  "name": "Expense Claim-Client", 
  "script": "frappe.ui.form.on(\"Expense Claim\", {\n\n    close_travel: function (frm) {\n        frm.toggle_display(\"travel_2\");\n        frm.toggle_display(\"add_travel\", \"close_travel\");\n    },\n    close_travel_3: function (frm) {\n        frm.toggle_display(\"travel_3\");\n        frm.toggle_display(\"add_travel\", \"close_travel\");\n    },\n    editable: function (frm) {\n        if (!frappe.user.has_role(\"System Manager\")) {\n        cur_frm.page.hide_icon_group()\n        cur_frm.page.hide_menu()\n        }\n\n        if (!frappe.user.has_role(\"Expense Verifier\")) {\n            cur_frm.get_field(\"stay_expenses\").grid.docfields[4].read_only = 1;\n            cur_frm.get_field(\"food_expenses\").grid.docfields[4].read_only = 1;\n            cur_frm.get_field(\"conveyance_expenses\").grid.docfields[5].read_only = 1;\n            cur_frm.get_field(\"other_expenses\").grid.docfields[4].read_only = 1;\n        }\n    },\n\n    refresh: function (frm) {\n        //frm.trigger(\"editable\")\n        frm.set_query(\"travel_management_id\", function () {\n            return {\n                \"filters\": {\n                    \"employee\": frm.doc.employee\n                }\n            }\n        })\n        frm.set_df_property(\"total_sanctioned_amount\", \"read_only\", !frappe.user.has_role('Expense Verifier'));\n\n        if (frm.doc.from_date11) {\n            frm.toggle_display(\"add_stay\")\n        }\n        if (frm.doc.from_date_12) {\n            frm.toggle_display(\"add_stay2\")\n        }\n        if (frm.doc.from_date_13) {\n            frm.toggle_display(\"add_food\")\n        }\n        if (frm.doc.from_date_14) {\n            frm.toggle_display(\"add_food3\")\n        }\n        if (frm.doc.travel_management) {\n            frm.add_custom_button(__(\"Travel Management\"), function () {\n                frappe.set_route(\"Form\", \"Travel Management\", frm.doc.travel_management)\n            })\n        }\n    },\n    onload: function (frm, cdt, cdn) {\n        cur_frm.page.hide_icon_group()\n        cur_frm.page.hide_menu()\n        // frm.trigger(\"editable\")\n\n        if (frm.doc.workflow_state == 'Claim Confirmed') {\n            frm.add_custom_button(__(\"Print\"), function () {\n                var me = this;\n                var doc = \"Expense Claim\"\n                var f_name = frm.doc.name\n                var print_format = \"Expense Claim New\";\n                var w = window.open(frappe.urllib.get_full_url(\"/api/method/frappe.utils.print_format.download_pdf?\"\n                    + \"doctype=\" + encodeURIComponent(\"Expense Claim\")\n                    + \"&name=\" + encodeURIComponent(f_name)\n                    + \"&trigger_print=1\"\n                    + \"&format=\" + print_format\n                    + \"&no_letterhead=0\"\n                    + (me.lang_code ? (\"&_lang=\" + me.lang_code) : \"\")));\n\n            })\n        }\n\n        if (!frm.doc.claim_amount2) {\n            frm.toggle_display(\"travel_2\");\n        }\n        if (!frm.doc.claim_amount_3) {\n            frm.toggle_display(\"travel_3\");\n        }\n        if (!frm.doc.from_date11) {\n            frm.toggle_display(\"stay\");\n        }\n        \n        if (!frm.doc.employee) {\n            frappe.call({\n                method: \"frappe.client.get_value\",\n                args: {\n                    doctype: \"Employee\",\n                    filters: { \"user_id\": frappe.session.user },\n                    fieldname: [\"name\", \"employee_name\", \"grade\", \"location_name\", \"department\", \"business_unit\"]\n                },\n                callback: function (r) {\n                    if (r.message) {\n                        frm.set_value(\"employee\", r.message.name);\n                        frm.set_value(\"employee_name\", r.message.employee_name);\n                        frm.set_value(\"grade\", r.message.grade);\n                        frm.set_value(\"location\", r.message.location_name);\n                        frm.set_value(\"department\", r.message.department);\n                        frm.set_value(\"business_unit\", r.message.business_unit);\n                        frm.set_value(\"category\", r.message.category);\n                        frappe.call({\n                            method: 'frappe.client.get',\n                            args: {\n                                doctype: 'Employee',\n                                name: frm.doc.employee\n                            },\n                            callback: function (r) {\n                                var LA = r.message.leave_approvers\n                                frm.set_value(\"leave_approver\", LA[0].leave_approver)\n                                frm.set_value(\"mode_of_payment\", \"Cash\")\n                            }\n                        })\n\n                    }\n                }\n            });\n        }\n        if (frm.doc.__islocal) {\n            if (frm.doc.travel_management) {\n                var child = frm.doc.expenses\n                for (var i = 0; i < child.length; i++) {\n                    if (child[0].expense_type == \"TRAVEL\") {\n                        var u = frm.doc.posting_date;\n                        u.readOnly = true;\n                    }\n                }\n            }\n        }\n    },\n    add_travel: function (frm) {\n        frm.toggle_display('travel_2', 'add_travel');\n        frm.toggle_display('add_travel');\n    },\n    add_travel_2: function (frm) {\n        frm.toggle_display('travel_3', 'add_travel_2');\n        frm.toggle_display('add_travel_2');\n    },\n    travel_type: function (frm) {\n        if (frm.doc.travel_type == \"BUS\") {\n            frm.set_value(\"booking_type\", \"Self\");\n        } else {\n            frm.set_value(\"booking_type\", \"Travel Desk\")\n        }\n    },\n    no_of_days: function (frm) {\n        frm.set_value(\"claim_amount\", (frm.doc.no_of_days * frm.doc.daily_allowance_per_day));\n\n    },\n    employee: function (frm) {\n        frappe.call({\n            method: 'frappe.client.get',\n            args: {\n                doctype: 'Employee',\n                name: frm.doc.employee\n            },\n            callback: function (r) {\n                var LA = r.message.leave_approvers\n                frm.set_value(\"leave_approver\", LA[0].leave_approver)\n            }\n        })\n    },\n    travel_management_id: function (frm) {\n\n        frm.set_query(\"travel_management_id\", function () {\n            return {\n                \"filters\": {\n                    \"from_date\": [\">=\", frm.doc.travel_from_date],\n                    \"to_date\": [\"<=\", frm.doc.travel_to_date],\n                    \"expense_claim_status\": \"\"\n                }\n            };\n        })\n\n        if (frm.doc.travel_management_id) {\n            frappe.call({\n                \"method\": \"frappe.client.get\",\n                args: {\n                    \"doctype\": \"Travel Management\",\n                    \"name\": frm.doc.travel_management_id\n                },\n                callback: function (r) {\n                    if (r.message) {\n                        var from_date = new Date(r.message.from_date)\n                        var to_date = new Date(r.message.to_date)\n                        frm.set_value(\"expense_date1\", r.message.to_date)\n                        frm.set_value(\"from_date1\", r.message.from_date)\n                        frm.set_value(\"to_date1\", r.message.to_date)\n                        frm.set_value(\"to_date_h\", r.message.to_date)\n                        frm.set_value(\"from_date_h\", r.message.from_date)\n                        frm.set_value(\"to_date_m\", r.message.to_date)\n                        frm.set_value(\"from_date_m\", r.message.from_date)\n                        frm.set_value(\"to_date_c\", r.message.to_date)\n                        frm.set_value(\"from_date_c\", r.message.from_date)\n                        frm.set_value(\"to_date_o\", r.message.to_date)\n                        frm.set_value(\"from_date_o\", r.message.from_date)\n                        frm.set_value(\"to_date\", r.message.to_date)\n                        frm.set_value(\"from_date\", r.message.from_date)\n                        frm.set_value(\"from_place\", r.message.from_place)\n                        frm.set_value(\"to_place\", r.message.to_place)\n                        frm.set_value(\"travel_type\", r.message.mode_of_travel)\n                        frm.set_value(\"booking_type\", r.message.ticket_booking)\n                        frm.set_value(\"from_place_r\", r.message.from_place_round)\n                        frm.set_value(\"to_place_r\", r.message.to_place_round)\n                        frm.set_value(\"trip_type\", r.message.trip_type)\n                        frm.set_value(\"purpose_of_travel\", r.message.description)\n                        frm.set_value(\"tour_type\", r.message.tour_type)\n                        if (from_date && to_date) {\n                            const diffTime = Math.abs(to_date.getTime() - from_date.getTime());\n                            const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));\n                            frm.set_value(\"no_of_days\", diffDays + 1)\n\n                        }\n                        if (frm.doc.tour_type == \"International\") {\n                            frm.set_value(\"daily_allowance_per_day\", 0);\n                        }\n\n\n                    }\n                }\n            })\n        }\n    },\n    claim_amount1: function (frm) {\n        frm.set_value(\"sanctioned_amount1\", frm.doc.claim_amount1)\n        frm.trigger(\"calculate_ticket\")\n\n    },\n    claim_amount2: function (frm) {\n        frm.set_value(\"sanctioned_amount2\", frm.doc.claim_amount2)\n        frm.trigger(\"calculate_ticket\")\n    },\n    claim_amount_3: function (frm) {\n        frm.set_value(\"sanctioned_amount3\", frm.doc.claim_amount3)\n        frm.trigger(\"calculate_ticket\")\n\n    },\n    calculate_ticket: function (frm) {\n        var total = frm.doc.claim_amount1 + frm.doc.claim_amount2 + frm.doc.claim_amount_3\n        frm.set_value(\"travel_summary\", total)\n    },\n    travel_management_id_r: function (frm) {\n        frm.set_query(\"travel_management_id_r\", function () {\n            return {\n                \"filters\": {\n                    \"from_date\": [\">=\", frm.doc.travel_from_date],\n                    \"to_date\": [\"<=\", frm.doc.travel_to_date]\n                }\n            };\n        })\n        if (frm.doc.travel_management_id_r) {\n            frappe.call({\n                \"method\": \"frappe.client.get\",\n                args: {\n                    \"doctype\": \"Travel Management\",\n                    \"name\": frm.doc.travel_management_id_r\n                },\n                callback: function (r) {\n                    if (r.message) {\n                        frm.set_value(\"from_date2\", r.message.from_date)\n                        frm.set_value(\"to_date2\", r.message.to_date)\n                        frm.set_value(\"from_place2\", r.message.from_place)\n                        frm.set_value(\"to_place2\", r.message.to_place)\n\t\t\tfrm.set_value(\"trip_type2\", r.message.trip_type)\n                        frm.set_value(\"travel_type2\", r.message.mode_of_travel)\n                        frm.set_value(\"booking_type2\", r.message.ticket_booking)\n                        frm.set_value(\"from_place3\", r.message.from_place_round)\n                        frm.set_value(\"to_place3\", r.message.to_place_round)\n                        frm.set_value(\"trip_type2\", r.message.trip_type)\n                    }\n                }\n            })\n        }\n    },\n    travel_management_id_3: function (frm) {\n        frm.set_query(\"travel_management_id_3\", function () {\n            return {\n                \"filters\": {\n                    \"from_date\": [\">=\", frm.doc.travel_from_date],\n                    \"to_date\": [\"<=\", frm.doc.travel_to_date]\n                }\n            };\n        })\n        if (frm.doc.travel_management_id_3) {\n            frappe.call({\n                \"method\": \"frappe.client.get\",\n                args: {\n                    \"doctype\": \"Travel Management\",\n                    \"name\": frm.doc.travel_management_id_3\n                },\n                callback: function (r) {\n                    if (r.message) {\n                        frm.set_value(\"from_date_3\", r.message.from_date)\n                        frm.set_value(\"to_date_3\", r.message.to_date)\n                        frm.set_value(\"from_place_3\", r.message.from_place)\n                        frm.set_value(\"to_place_3\", r.message.to_place)\n                        frm.set_value(\"travel_type_3\", r.message.mode_of_travel)\n                        frm.set_value(\"booking_type_3\", r.message.ticket_booking)\n                        frm.set_value(\"from_place_31\", r.message.from_place_round)\n                        frm.set_value(\"to_place_31\", r.message.to_place_round)\n                        frm.set_value(\"trip_type2\", r.message.trip_type)\n                    }\n                }\n            })\n        }\n    },\n\n    no_of_days: function (frm) {\n        if (frm.doc.no_of_days) {\n            var da = (frm.doc.no_of_days * frm.doc.daily_allowance_per_day)\n            frm.set_value(\"claim_amount\", da);\n            frm.set_value(\"sanctioned_amount\", da);\n            frm.set_value(\"daily_allowance_summary\", da);\n        }\n    },\n    validate: function (frm, cdt, cdn) {\n       \n    },\n    after_save: function (frm) {\n        if (frm.doc.__islocal) {\n            frappe.msgprint(__(\"Expense Claim Applied Successfully!!!\"))\n            frappe.route_options = {\n                \"employee\": frm.doc.employee\n            }\n            frappe.set_route(\"List\", \"Expense Claim\")\n        }\n        cur_frm.refresh()\n    }\n})\nfrappe.ui.form.on(\"Expense Claim Detail\", {\n    expense_type1: function (frm, cdt, cdn) {\n        var child = locals[cdt][cdn]\n        frappe.model.set_value(cdt, cdn, \"expense_type\", child.expense_type1)\n    }\n})\n\nfrappe.ui.form.on(\"Expense Claim Stay\", {\n    onload: function (frm, cdt, cdn) {\n        var child = locals[cdt][cdn]\n        frm.set_df_property('approved_amount', 'read_only', 1)\n        // cur_frm.get_field(\"stay_expenses\").grid.grid_rows[0].columns.approved_amount.df.read_only = 1;\n    },\n    date: function (frm, cdt, cdn) {\n        var child = locals[cdt][cdn]\n        var from_date = frappe.datetime.add_days(frm.doc.from_date1, -1)\n        var to_date = frappe.datetime.add_days(frm.doc.to_date1, 1)\n        // if(child.from_date)\n        var stay_date = Date.parse(child.date)\n        if (!(child.date >= from_date && child.date <= to_date)) {\n\n            frappe.msgprint(__(\"Expense Date should be between Travel date\"))\n        }\n        // if(child.date == from && child.date == to){\n        //     frappe.model.set_value(child.doctype,child.name,\"date\",)\n        // }\n\n    },\n    amount: function (frm, cdt, cdn) {\n        var total_amount = 0.0\n        $.each(frm.doc.stay_expenses || [], function (i, v) {\n            if (v.amount) {\n                total_amount += v.amount\n            }\n        })\n        frm.set_value(\"claim_amount_h\", total_amount)\n        frm.set_value(\"sanctioned_amount_h\", total_amount)\n        frm.set_value(\"stay_summary\", total_amount)\n    },\n    approved_amount: function (frm, cdt, cdn) {\n        var total_approved_amount = 0.0\n        $.each(frm.doc.stay_expenses || [], function (i, v) {\n            if (v.approved_amount) {\n                total_approved_amount += v.approved_amount\n            }\n        })\n        frm.set_value(\"sanctioned_amount_h\", total_approved_amount)\n        frm.set_value(\"stay_summary\", total_approved_amount)\n    },\n})\n\nfrappe.ui.form.on(\"Expense Claim Food\", {\n    amount: function (frm, cdt, cdn) {\n        var total_amount = 0.0\n        $.each(frm.doc.food_expenses || [], function (i, v) {\n            if (v.amount) {\n                total_amount += v.amount\n            }\n        })\n        frm.set_value(\"claim_amount_m\", total_amount)\n        frm.set_value(\"sanctioned_amount_m\", total_amount)\n        frm.set_value(\"food_summary\", total_amount)\n    },\n    date: function (frm, cdt, cdn) {\n        var child = locals[cdt][cdn]\n        var from_date = frappe.datetime.add_days(frm.doc.from_date1, -1)\n        var to_date = frappe.datetime.add_days(frm.doc.to_date1, 1)\n        // if(child.from_date)\n        var stay_date = Date.parse(child.date)\n        if (!(child.date >= from_date && child.date <= to_date)) {\n\n            frappe.msgprint(__(\"Expense Date should be between Travel date\"))\n        }\n        // if(child.date == from && child.date == to){\n        //     frappe.model.set_value(child.doctype,child.name,\"date\",)\n        // }\n\n    },\n    approved_amount: function (frm, cdt, cdn) {\n        var total_approved_amount = 0.0\n        $.each(frm.doc.food_expenses || [], function (i, v) {\n            if (v.approved_amount) {\n                total_approved_amount += v.approved_amount\n            }\n        })\n        frm.set_value(\"sanctioned_amount_m\", total_approved_amount)\n        frm.set_value(\"food_summary\", total_approved_amount)\n    },\n})\n\nfrappe.ui.form.on(\"Expense Claim Conveyance\", {\n    amount: function (frm, cdt, cdn) {\n        var total_amount = 0.0\n        $.each(frm.doc.conveyance_expenses || [], function (i, v) {\n            if (v.amount) {\n                total_amount += v.amount\n            }\n        })\n        frm.set_value(\"claim_amount_c\", total_amount)\n        frm.set_value(\"sanctioned_amount_c\", total_amount)\n        frm.set_value(\"conveyance_summary\", total_amount)\n    },\n    date: function (frm, cdt, cdn) {\n        var child = locals[cdt][cdn]\n        var from_date = frappe.datetime.add_days(frm.doc.from_date1, -1)\n        var to_date = frappe.datetime.add_days(frm.doc.to_date1, 1)\n        // if(child.from_date)\n        var stay_date = Date.parse(child.date)\n        if (!(child.date >= from_date && child.date <= to_date)) {\n\n            frappe.msgprint(__(\"Expense Date should be between Travel date\"))\n        }\n        // if(child.date == from && child.date == to){\n        //     frappe.model.set_value(child.doctype,child.name,\"date\",)\n        // }\n\n    },\n    approved_amount: function (frm, cdt, cdn) {\n        var total_approved_amount = 0.0\n        $.each(frm.doc.conveyance_expenses || [], function (i, v) {\n            if (v.approved_amount) {\n                total_approved_amount += v.approved_amount\n            }\n        })\n        frm.set_value(\"sanctioned_amount_c\", total_approved_amount)\n        frm.set_value(\"conveyance_summary\", total_approved_amount)\n    },\n})\n\nfrappe.ui.form.on(\"Expense Claim Others\", {\n    amount: function (frm, cdt, cdn) {\n        var total_amount = 0.0\n        $.each(frm.doc.other_expenses || [], function (i, v) {\n            if (v.amount) {\n                total_amount += v.amount\n            }\n        })\n        frm.set_value(\"claim_amount_o\", total_amount)\n        frm.set_value(\"sanctioned_amount_o\", total_amount)\n        frm.set_value(\"others_summary\", total_amount)\n    },\n    date: function (frm, cdt, cdn) {\n        var child = locals[cdt][cdn]\n        var from_date = frappe.datetime.add_days(frm.doc.from_date1, -1)\n        var to_date = frappe.datetime.add_days(frm.doc.to_date1, 1)\n        // if(child.from_date)\n        var stay_date = Date.parse(child.date)\n        if (!(child.date >= from_date && child.date <= to_date)) {\n\n            frappe.msgprint(__(\"Expense Date should be between Travel date\"))\n        }\n        // if(child.date == from && child.date == to){\n        //     frappe.model.set_value(child.doctype,child.name,\"date\",)\n        // }\n\n    },\n    approved_amount: function (frm, cdt, cdn) {\n        var total_approved_amount = 0.0\n        $.each(frm.doc.other_expenses || [], function (i, v) {\n            if (v.approved_amount) {\n                total_approved_amount += v.approved_amount\n            }\n        })\n        frm.set_value(\"sanctioned_amount_o\", total_approved_amount)\n        frm.set_value(\"others_summary\", total_approved_amount)\n    },\n})\n\n", 
  "script_type": "Client"
 }, 
 {
  "docstatus": 0, 
  "doctype": "Custom Script", 
  "dt": "Movement Register Approval", 
  "modified": "2019-03-05 12:25:58.009563", 
  "name": "Movement Register Approval-Client", 
  "script": "", 
  "script_type": "Client"
 }, 
 {
  "docstatus": 0, 
  "doctype": "Custom Script", 
  "dt": "Travel Management Approval", 
  "modified": "2019-09-04 23:30:15.068497", 
  "name": "Travel Management Approval-Client", 
  "script": "frappe.ui.form.on('Travel Management Approval', {\n\tonload: function (frm, cdt, cdn) {\n\t\tfrappe.breadcrumbs.add(\"HR\");\n\t\t$(\".grid-add-row\").hide();\n\t\t$(\".grid-remove-rows\").hide();\n\t\t$(\":input[data-fieldname='approved']\").addClass('btn-success');\n\t\t$(\":input[data-fieldname='rejected']\").addClass('btn-danger');\n\t\tfrappe.call({\n\t\t\t\"method\": \"frappe.client.get_list\",\n\t\t\targs: {\n\t\t\t\t\"doctype\": \"Travel Management\",\n\t\t\t\tfilters: { \"docstatus\": 0, \"status\": \"Applied\" }\n\t\t\t},\n\t\t\tcallback: function (r) {\n\t\t\t\tif (r.message) {\n\t\t\t\t\t$.each(r.message, function (i, d) {\n\t\t\t\t\t\tfrappe.call({\n\t\t\t\t\t\t\t\"method\": \"frappe.client.get\",\n\t\t\t\t\t\t\targs: {\n\t\t\t\t\t\t\t\t\"doctype\": \"Travel Management\",\n\t\t\t\t\t\t\t\t\"name\": d.name\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tcallback: function (r) {\n\t\t\t\t\t\t\t\tif (r.message) {\n\t\t\t\t\t\t\t\t\tif ((frappe.session.user == r.message.approver) || (frappe.user.has_role(\"System Manager\"))) {\n\t\t\t\t\t\t\t\t\t\tvar row = frappe.model.add_child(frm.doc, \"Travel Management Process\", \"travel_management_process\");\n\t\t\t\t\t\t\t\t\t\trow.travel_management = r.message.name;\n\t\t\t\t\t\t\t\t\t\trow.employee_name = r.message.employee_name;\n\t\t\t\t\t\t\t\t\t\trow.from_date = r.message.from_date;\n\t\t\t\t\t\t\t\t\t\trow.to_date = r.message.to_date;\n\t\t\t\t\t\t\t\t\t\trow.no_of_days = r.message.total_number_of_days;\n\t\t\t\t\t\t\t\t\t\trow.approver = r.message.approver;\n\t\t\t\t\t\t\t\t\t\trow.description = r.message.description;\n\t\t\t\t\t\t\t\t\t\trow.approved = 0;\n\t\t\t\t\t\t\t\t\t\trow.rejected = 0;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\trefresh_field(\"travel_management_process\");\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t})\n\t\t\t\t\t})\n\t\t\t\t}\n\t\t\t}\n\t\t})\n\t\tfrappe.call({\n\t\t\t\"method\": \"frappe.client.get_list\",\n\t\t\targs: {\n\t\t\t\t\"doctype\": \"Travel Management\",\n\t\t\t\tfilters: { \"docstatus\": 1, \"status\": \"Approved\" }\n\t\t\t},\n\t\t\tcallback: function (r) {\n\t\t\t\tif (r.message) {\n\t\t\t\t\t$.each(r.message, function (i, d) {\n\t\t\t\t\t\tfrappe.call({\n\t\t\t\t\t\t\t\"method\": \"frappe.client.get\",\n\t\t\t\t\t\t\targs: {\n\t\t\t\t\t\t\t\t\"doctype\": \"Travel Management\",\n\t\t\t\t\t\t\t\t\"name\": d.name\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tcallback: function (r) {\n\t\t\t\t\t\t\t\tif (r.message) {\n\t\t\t\t\t\t\t\t\tif ((frappe.session.user == r.message.approver) || (frappe.user.has_role(\"System Manager\"))) {\n\t\t\t\t\t\t\t\t\t\tvar row = frappe.model.add_child(frm.doc, \"Travel Management Process1\", \"travel_management_process1\");\n\t\t\t\t\t\t\t\t\t\trow.travel_management = r.message.name;\n\t\t\t\t\t\t\t\t\t\trow.employee_name = r.message.employee_name;\n\t\t\t\t\t\t\t\t\t\trow.from_date = r.message.from_date;\n\t\t\t\t\t\t\t\t\t\trow.to_date = r.message.to_date;\n\t\t\t\t\t\t\t\t\t\trow.no_of_days = r.message.total_number_of_days;\n\t\t\t\t\t\t\t\t\t\trow.approver = r.message.approver;\n\t\t\t\t\t\t\t\t\t\trow.description = r.message.description;\n\t\t\t\t\t\t\t\t\t\trow.approved = 0;\n\t\t\t\t\t\t\t\t\t\trow.rejected = 0;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\trefresh_field(\"travel_management_process1\");\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t})\n\t\t\t\t\t})\n\t\t\t\t}\n\t\t\t}\n\t\t})\n\t},\n\trefresh: function (frm) {\n\t\tfrm.disable_save();\n\t},\n\tapproved: function (frm, cdt, cdn) {\n\t\tvar grid = frm.fields_dict[\"travel_management_process\"].grid;\n\t\tif (grid.get_selected_children().length !== 0) {\n\t\t\t$.each(grid.get_selected_children(), function (i, d) {\n\t\t\t\tconsole.log(d.travel_management)\n\t\t\t\tfrappe.call({\n\t\t\t\t\t\"method\": \"hunter_douglas.custom.update_travel_approval\",\n\t\t\t\t\t\"args\": {\n\t\t\t\t\t\t\"doc\": d.travel_management,\n\t\t\t\t\t\t\"status\": \"Approved\"\n\t\t\t\t\t},\n\t\t\t\t\tcallback: function (r) {\n                        console.log(r)\n\t\t\t\t\t\tfrm.refresh_field(\"travel_management_process\");\n\t\t\t\t\t}\n\t\t\t\t})\n\t\t\t})\n\t\t\tfrappe.msgprint(\"Status Updated Successfully\")\n\t\t\tsetTimeout(function() { location.reload() }, 1000);\n\n\t\t}\n\t},\n\trejected: function (frm, cdt, cdn) {\n\t\tvar grid = frm.fields_dict[\"travel_management_process\"].grid;\n\t\tif (grid.get_selected_children().length !== 0) {\n\t\t\t$.each(grid.get_selected_children(), function (i, d) {\n\t\t\t\tfrappe.call({\n\t\t\t\t\t\"method\": \"hunter_douglas.custom.update_travel_approval\",\n\t\t\t\t\t\"args\": {\n\t\t\t\t\t\t\"doc\": d.travel_management,\n\t\t\t\t\t\t\"status\": \"Rejected\"\n\t\t\t\t\t},\n\t\t\t\t\tcallback: function (r) {\n\t\t\t\t\t}\n\t\t\t\t})\n\t\t\t})\n\t\t\tfrappe.msgprint(\"Status Updated Successfully\")\n\t\t\tsetTimeout(function () { location.reload() }, 1000);\n\n\t\t}\n\t},\n\tto_date: function (frm) {\n\t\tfrm.clear_table(\"travel_management_process\");\n\t\tfrm.clear_table(\"travel_management_process1\");\n\t\tfrappe.call({\n\t\t\t\"method\": \"frappe.client.get_list\",\n\t\t\targs: {\n\t\t\t\t\"doctype\": \"Travel Management\",\n\t\t\t\tfilters: { \"docstatus\": 0, \"status\": \"Applied\" }\n\t\t\t},\n\t\t\tcallback: function (r) {\n\t\t\t\tif (r.message) {\n\t\t\t\t\t$.each(r.message, function (i, d) {\n\t\t\t\t\t\tfrappe.call({\n\t\t\t\t\t\t\t\"method\": \"frappe.client.get\",\n\t\t\t\t\t\t\targs: {\n\t\t\t\t\t\t\t\t\"doctype\": \"Travel Management\",\n\t\t\t\t\t\t\t\t\"name\": d.name\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tcallback: function (r) {\n\t\t\t\t\t\t\t\tif (r.message) {\n\t\t\t\t\t\t\t\t\tif ((frappe.session.user == r.message.approver) && ((frm.doc.from_date <= r.message.from_date) && (frm.doc.to_date >= r.message.to_date)) || (frappe.user.has_role(\"System Manager\"))) {\n\t\t\t\t\t\t\t\t\t\tvar row = frappe.model.add_child(frm.doc, \"Travel Management Process\", \"travel_management_process\");\n\t\t\t\t\t\t\t\t\t\trow.travel_management = r.message.name;\n\t\t\t\t\t\t\t\t\t\trow.employee_name = r.message.employee_name;\n\t\t\t\t\t\t\t\t\t\trow.from_date = r.message.from_date;\n\t\t\t\t\t\t\t\t\t\trow.to_date = r.message.to_date;\n\t\t\t\t\t\t\t\t\t\trow.no_of_days = r.message.total_number_of_days;\n\t\t\t\t\t\t\t\t\t\trow.approver = r.message.approver;\n\n\t\t\t\t\t\t\t\t\t\trow.approved = 0;\n\t\t\t\t\t\t\t\t\t\trow.rejected = 0;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\trefresh_field(\"travel_management_process\");\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t})\n\t\t\t\t\t})\n\t\t\t\t}\n\t\t\t}\n\t\t})\n\t\tfrappe.call({\n\t\t\t\"method\": \"frappe.client.get_list\",\n\t\t\targs: {\n\t\t\t\t\"doctype\": \"Travel Management\",\n\t\t\t\tfilters: { \"docstatus\": 1, \"status\": \"Approved\" }\n\t\t\t},\n\t\t\tcallback: function (r) {\n\t\t\t\tif (r.message) {\n\t\t\t\t\t$.each(r.message, function (i, d) {\n\t\t\t\t\t\tfrappe.call({\n\t\t\t\t\t\t\t\"method\": \"frappe.client.get\",\n\t\t\t\t\t\t\targs: {\n\t\t\t\t\t\t\t\t\"doctype\": \"Travel Management\",\n\t\t\t\t\t\t\t\t\"name\": d.name\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tcallback: function (r) {\n\t\t\t\t\t\t\t\tif (r.message) {\n\t\t\t\t\t\t\t\t\tif ((frappe.session.user == r.message.approver) && ((frm.doc.from_date <= r.message.from_date) && (frm.doc.to_date >= r.message.to_date)) || (frappe.user.has_role(\"System Manager\"))) {\n\t\t\t\t\t\t\t\t\t\tvar row = frappe.model.add_child(frm.doc, \"Travel Management Process1\", \"travel_management_process1\");\n\t\t\t\t\t\t\t\t\t\trow.travel_management = r.message.name;\n\t\t\t\t\t\t\t\t\t\trow.employee_name = r.message.employee_name;\n\t\t\t\t\t\t\t\t\t\trow.from_date = r.message.from_date;\n\t\t\t\t\t\t\t\t\t\trow.to_date = r.message.to_date;\n\t\t\t\t\t\t\t\t\t\trow.no_of_days = r.message.total_number_of_days;\n\t\t\t\t\t\t\t\t\t\trow.approver = r.message.approver;\n\n\t\t\t\t\t\t\t\t\t\trow.approved = 0;\n\t\t\t\t\t\t\t\t\t\trow.rejected = 0;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\trefresh_field(\"travel_management_process1\");\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t})\n\t\t\t\t\t})\n\t\t\t\t}\n\t\t\t}\n\t\t})\n\n\t}\n})\t", 
  "script_type": "Client"
 }, 
 {
  "docstatus": 0, 
  "doctype": "Custom Script", 
  "dt": "Tour Application", 
  "modified": "2019-03-27 18:26:24.191573", 
  "name": "Tour Application-Client", 
  "script": "frappe.ui.form.on(\"Tour Application\",{\n    after_save:function(frm){\nif(frm.doc.is_from_ar == \"Yes\"){\n                frappe.msgprint(__(\"Tour Applied/Edited Successfully!!!\"))\n               frappe.set_route(\"query-report\",\"Attendance recapitulation\")\n        } else {\n                frappe.msgprint(__(\"Tour Applied/Edited Successfully!!!\"))\n     \t\tsetTimeout(function () { window.history.back(); }, 1000);\n        }\n     \n    },\n    onload:function(frm){\n        if(frm.doc.__islocal){\n\t   frm.set_value(\"status\",\"Open\")\n            frappe.call({\n                method: \"frappe.client.get_value\",\n                args: {\n                    doctype: \"Employee\",\n                    filters: {\"user_id\": frappe.session.user},\n                    fieldname: [\"name\",\"employee_name\",\"grade\",\"location_name\",\"department_code\",\"business_unit\"]\n                },\n                callback: function(r){\n                    if(r.message){\n                        //var la = r.message.leave_approvers\n                        //console.log(r.message.employee_name)\n                        frm.set_value(\"employee\",r.message.name);\n                        frm.set_value(\"employee_name\",r.message.employee_name);\n\t\t\tfrm.set_value(\"grade\",r.message.grade);\n                        frm.set_value(\"location\",r.message.location_name);\n\t\t\tfrm.set_value(\"department\",r.message.department_code);\n                        frm.set_value(\"business_unit\",r.message.business_unit);\n\t\t\tfrm.set_value(\"category\",r.message.category);\n\t\t\tfrappe.call({\n        \t\tmethod: 'frappe.client.get',\n        \t\targs: {\n           \t\t \tdoctype: 'Employee',\n            \t\t\tname: frm.doc.employee\n       \t\t\t\t },\n       \t\t\tcallback: function(r) {\n          \t\t\t var LA = r.message.leave_approvers\n\t   \t\t\t frm.set_value(\"approver\",LA[0].leave_approver)\n       \t\t\t\t}\n      \t\t}) \n\t\t\t\n                        }\n    }\n    });\n    }\n    },\nvalidate: function (frm) {\nif(frappe.session.user == 'hr.hdi@hunterdouglas.asia'){\n         frm.set_value(\"status\",\"Approved\");\n    }else {\n        frm.set_value(\"status\",\"Applied\");\n\t\n    }\n        if (frm.doc.from_date == frm.doc.to_date) {\n            if ((frm.doc.from_date_session == \"First Half\") || (frm.doc.from_date_session == \"Second Half\")) {\n                frm.set_value(\"half_day\", \"1\")\n                frm.set_value(\"half_day_date\", frm.doc.from_date)\n            }\n        } else {\n            if ((frm.doc.from_date_session == \"Full Day\") && (frm.doc.to_date_session == \"First Half\")) {\n                frm.set_value(\"half_day\", \"1\")\n                frm.set_value(\"half_day_date\", frm.doc.to_date)\n            } else if ((frm.doc.from_date_session == \"Second Half\") && (frm.doc.to_date_session == \"Full Day\")) {\n                frm.set_value(\"half_day\", \"1\")\n                frm.set_value(\"half_day_date\", frm.doc.from_date)\n            }\n        }\n    },\nrefresh: function(frm){\nif (frm.doc.from_date != frm.doc.to_date) {\n            frm.trigger(\"session_field\")\n        }\n},\nfrom_date_session: function (frm) {\nfrm.trigger(\"session_field\")\n    },\nto_date_session: function (frm) {\nfrm.trigger(\"session_field\")\n    },\n    from_date: function (frm) {\n        frm.trigger(\"session_refresh\")\nfrm.trigger(\"session_field\")\n    },\n    to_date: function (frm) {\n        frm.trigger(\"session_refresh\")\n        //if(frm.doc.from_date != frm.doc.to_date){\n        frm.trigger(\"session_field\")\n        //}\n    },\n    session_refresh: function (frm) {\n        frm.set_value(\"from_date_session\", \"Full Day\")\n        frm.set_value(\"to_date_session\", \"Full Day\")\n    },\n    session_field: function (frm) {\n        if (frm.doc.from_date == frm.doc.to_date) {\n            frm.fields_dict.from_date_session.df.options = ['Full Day', 'First Half', 'Second Half'].join('\\n')\nfrm.fields_dict.to_date_session.df.options = ['Full Day', 'First Half', 'Second Half'].join('\\n')\nrefresh_field(\"from_date_session\");\n        refresh_field(\"to_date_session\");\n        } else if (frm.doc.from_date != frm.doc.to_date) {\n            frm.fields_dict.from_date_session.df.options = ['Full Day', 'Second Half'].join('\\n')\n            frm.fields_dict.to_date_session.df.options = ['Full Day', 'First Half'].join('\\n')\nrefresh_field(\"from_date_session\");\n        refresh_field(\"to_date_session\");\n        }\n        \n    },\nemployee: function(frm){\nif(frappe.user.has_role(\"System Manager\")){\nfrappe.call({\n                method: \"frappe.client.get_value\",\n                args: {\n                    doctype: \"Employee\",\n                    filters: {\"employee_number\":frm.doc.employee},\n                    fieldname: [\"name\",\"employee_name\",\"grade\",\"location_name\",\"department_code\",\"business_unit\"]\n                },\n                callback: function(r){\n                    if(r.message){\n                        //var la = r.message.leave_approvers\n                        //console.log(r.message.employee_name)\n                        frm.set_value(\"employee\",r.message.name);\n                        frm.set_value(\"employee_name\",r.message.employee_name);\n\t\t\tfrm.set_value(\"grade\",r.message.grade);\n                        frm.set_value(\"location\",r.message.location_name);\n\t\t\tfrm.set_value(\"department\",r.message.department_code);\n                        frm.set_value(\"business_unit\",r.message.business_unit);\n\t\t\tfrm.set_value(\"category\",r.message.category);\n\t\t\tfrappe.call({\n        \t\tmethod: 'frappe.client.get',\n        \t\targs: {\n           \t\t \tdoctype: 'Employee',\n            \t\t\tname: frm.doc.employee\n       \t\t\t\t },\n       \t\t\tcallback: function(r) {\n          \t\t\t var LA = r.message.leave_approvers\n\t   \t\t\t frm.set_value(\"approver\",LA[0].leave_approver)\n       \t\t\t\t}\n      \t\t}) \n\t\t\t\n                        }\n    }\n    });\n}\n}\n})", 
  "script_type": "Client"
 }, 
 {
  "docstatus": 0, 
  "doctype": "Custom Script", 
  "dt": "Expense Claim Approval", 
  "modified": "2019-09-15 20:39:39.596252", 
  "name": "Expense Claim Approval-Client", 
  "script": "frappe.ui.form.on('Expense Claim Approval', {\n    onload: function (frm, cdt, cdn) {\n        frappe.breadcrumbs.add(\"HR\");\n        $(\".grid-add-row\").hide();\n        $(\".grid-remove-rows\").hide();\n        $(\":input[data-fieldname='approved']\").addClass('btn-success');\n        $(\":input[data-fieldname='rejected']\").addClass('btn-danger');\n        frappe.call({\n            \"method\": \"frappe.client.get_list\",\n            args: {\n                \"doctype\": \"Expense Claim\",\n                filters: { \"docstatus\": 0, \"workflow_state\": \"Draft\"}\n            },\n            callback: function (r) {\n                console.log(r.message)\n                if (r.message) {\n                    $.each(r.message, function (i, d) {\n                        frappe.call({\n                            \"method\": \"frappe.client.get\",\n                            args: {\n                                \"doctype\": \"Expense Claim\",\n                                \"name\": d.name\n                            },\n                            callback: function (r) {\n                                if (r.message) {\n                                    if ((frappe.session.user == r.message.leave_approver) || (frappe.user.has_role(\"System Manager\"))) {\n                                        var row = frappe.model.add_child(frm.doc, \"Expense Claim Approval Process\", \"expense_claim_approval_process\");\n                                        row.travel_management = r.message.name;\n                                        row.employee_name = r.message.employee_name;\n                                        row.purpose = r.message.purpose_of_travel;\n                                        row.approver = r.message.leave_approver;\n                                        row.total_claim_amount = r.message.total_claimed_amount;\n                                        row.approved = 0;\n                                        row.rejected = 0;\n                                    }\n                                    refresh_field(\"expense_claim_approval_process\");\n                                }\n                            }\n                        })\n                    })\n                }\n            }\n        })\n        frappe.call({\n            \"method\": \"frappe.client.get_list\",\n            args: {\n                \"doctype\": \"Expense Claim\",\n                filters: { \"docstatus\": 0, \"workflow_state\": \"Claim Confirmed\" }\n            },\n            callback: function (r) {\n                if (r.message) {\n                    $.each(r.message, function (i, d) {\n                        frappe.call({\n                            \"method\": \"frappe.client.get\",\n                            args: {\n                                \"doctype\": \"Expense Claim\",\n                                \"name\": d.name\n                            },\n                            callback: function (r) {\n                                if (r.message) {\n                                    if ((frappe.session.user == r.message.leave_approver) || (frappe.user.has_role(\"System Manager\"))) {\n                                        var row = frappe.model.add_child(frm.doc, \"Expense Claim Approval Process1\", \"expense_claim_approval_process1\");\n                                        row.travel_management = r.message.name;\n                                        row.employee_name = r.message.employee_name;\n                                        row.purpose = r.message.purpose_of_travel;\n                                        row.approver = r.message.leave_approver;\n                                        row.total_claim_amount = r.message.total_claimed_amount;\n                                        row.approved = 0;\n                                        row.rejected = 0;\n                                    }\n                                    refresh_field(\"expense_claim_approval_process1\");\n                                }\n                            }\n                        })\n                    })\n                }\n            }\n        })\n    },\n    refresh: function (frm) {\n        frm.disable_save();\n    },\n    approved: function (frm, cdt, cdn) {\n        var grid = frm.fields_dict[\"expense_claim_approval_process\"].grid;\n        if (grid.get_selected_children().length !== 0) {\n            $.each(grid.get_selected_children(), function (i, d) {\n                frappe.call({\n                    \"method\": \"hunter_douglas.custom.update_expense_approval\",\n                    \"args\": {\n                        \"doc\": d.travel_management,\n                        \"status\": \"Claim Confirmed\",\n                        \"approval_status\": \"Approved\"\n                    },\n                    callback: function (r) {\n                        frm.refresh_field(\"expense_claim_approval_process\");\n                    }\n                })\n            })\n            frappe.msgprint(\"Status Updated Successfully\")\n            setTimeout(function() { location.reload() }, 1000);\n\n        }\n    },\n    rejected: function (frm, cdt, cdn) {\n        var grid = frm.fields_dict[\"expense_claim_approval_process\"].grid;\n        if (grid.get_selected_children().length !== 0) {\n            $.each(grid.get_selected_children(), function (i, d) {\n                frappe.call({\n                    \"method\": \"hunter_douglas.custom.update_expense_approval\",\n                    \"args\": {\n                        \"doc\": d.travel_management,\n                        \"status\": \"Draft\",\n                        \"approval_status\": \"Rejected\"\n                    },\n                    callback: function (r) {\n                    }\n                })\n            })\n            frappe.msgprint(\"Status Updated Successfully\")\n\t    setTimeout(function() { location.reload() }, 1000);\n\n        }\n    },\n    to_date: function (frm) {\n        frm.clear_table(\"expense_claim_approval_process\");\n        frm.clear_table(\"expense_claim_approval_process1\");\n        frappe.call({\n            \"method\": \"frappe.client.get_list\",\n            args: {\n                \"doctype\": \"Expense Claim\",\n                filters: { \"docstatus\": 0, \"status\": \"Applied\" }\n            },\n            callback: function (r) {\n                if (r.message) {\n                    $.each(r.message, function (i, d) {\n                        frappe.call({\n                            \"method\": \"frappe.client.get\",\n                            args: {\n                                \"doctype\": \"Expense Claim\",\n                                \"name\": d.name\n                            },\n                            callback: function (r) {\n                                if (r.message) {\n                                    if ((frappe.session.user == r.message.approver) && ((frm.doc.from_date <= r.message.from_date) && (frm.doc.to_date >= r.message.to_date)) || (frappe.user.has_role(\"System Manager\"))) {\n                                        var row = frappe.model.add_child(frm.doc, \"Travel Management Process\", \"travel_management_process\");\n                                        row.travel_management = r.message.name;\n                                        row.employee_name = r.message.employee_name;\n                                        row.purpose = r.message.purpose_of_travel;\n                                        row.approver = r.message.leave_approver;\n                                        row.total_claim_amount = r.message.total_claimed_amount;\n                                        row.approved = 0;\n                                        row.rejected = 0;\n                                    }\n                                    refresh_field(\"travel_management_process\");\n                                }\n                            }\n                        })\n                    })\n                }\n            }\n        })\n        frappe.call({\n            \"method\": \"frappe.client.get_list\",\n            args: {\n                \"doctype\": \"Travel Management\",\n                filters: { \"docstatus\": 1, \"status\": \"Approved\" }\n            },\n            callback: function (r) {\n                if (r.message) {\n                    $.each(r.message, function (i, d) {\n                        frappe.call({\n                            \"method\": \"frappe.client.get\",\n                            args: {\n                                \"doctype\": \"Expense Claim\",\n                                \"name\": d.name\n                            },\n                            callback: function (r) {\n                                if (r.message) {\n                                    if ((frappe.session.user == r.message.approver) && ((frm.doc.from_date <= r.message.from_date) && (frm.doc.to_date >= r.message.to_date)) || (frappe.user.has_role(\"System Manager\"))) {\n                                        var row = frappe.model.add_child(frm.doc, \"Expense Claim Approval Process1\", \"expense_claim_approval_process1\");\n                                        row.travel_management = r.message.name;\n                                        row.employee_name = r.message.employee_name;\n                                        row.purpose = r.message.purpose_of_travel;\n                                        row.approver = r.message.leave_approver;\n                                        row.total_claim_amount = r.message.total_claimed_amount;\n                                        row.approved = 0;\n                                        row.rejected = 0;\n                                    }\n                                    refresh_field(\"expense_claim_approval_process1\");\n                                }\n                            }\n                        })\n                    })\n                }\n            }\n        })\n\n    }\n})\t", 
  "script_type": "Client"
 }, 
 {
  "docstatus": 0, 
  "doctype": "Custom Script", 
  "dt": "Appraisal", 
  "modified": "2020-01-23 12:28:22.933370", 
  "name": "Appraisal-Client", 
  "script": "var child;\nfrappe.ui.form.on(\"Appraisal\", {\n    validate: function (frm) {\n        if (frm.doc.assessing_officer_total == 0) {\n            if (!frm.doc.zero_score) {\n                validated = false;\n                frappe.confirm(\n                    'Total Score is 0,Kindly Confirm?',\n                    function () {\n                        frm.set_value(\"zero_score\", \"Updated\")\n                        frm.save()\n                    },\n                    function () {\n                        window.close();\n                        show_alert('Thanks for continue here!')\n\n                    }\n                )\n            }\n        }\n        frm.trigger(\"score_conditions\")\n    },\n    employee: function (frm) {\n        if (frm.doc.employee) {\n            console.log(frm.doc.employee)\n            frappe.call({\n                \"method\": \"frappe.client.get\",\n                args: {\n                    \"doctype\": \"Appraisal\",\n                    filters:{\n                    \"employee\": frm.doc.employee,\n                    \"appraisal_year\": \"2018\"\n                    }\n                },\n                callback: function (r) {\n                    if (r.message) {\n                        console.log(\"hi\")\n                        console.log(r.message)\n                        var child = r.message.appraisal_hike\n                        var len = child.length\n                        if (len != 0) {\n                            for (var i = 0; i < len; i++) {\n                                var row = frappe.model.add_child(frm.doc, \"Appraisal Hike\", \"appraisal_hike\");\n\n                                row.year = child[i].year\n                                row.ctc = child[i].ctc\n                            }\n                            frm.refresh_field(\"appraisal_hike\")\n                        }\n                    }\n                }\n            })\n            frappe.model.get_value('Employee', { 'employee': frm.doc.employee }, 'date_of_joining',\n                function (data) {\n                    if (data) {\n                        frm.set_value(\"doj\", data.date_of_joining)\n                    }\n                });\n\n            frm.trigger(\"appraisal_check\")\n            \n        }\n        frm.set_value(\"kra_template\", \"Performance Appraisal\")\n    },\n\n    appraisal_check: function (frm) {\n        frappe.model.get_value('Appraisal', { 'employee': frm.doc.employee, 'appraisal_year': frm.doc.appraisal_year }, 'name',\n            function (data) {\n                if (data) {\n                    show_alert(__(\"Appraisal was already created for selected Employee for the Appraisal Year\"))\n                    frappe.set_route(\"Form\", \"Appraisal\", data.name)\n\n                }\n            })\n    },\n    refresh: function (frm) {\n        if ((frappe.user.has_role(\"One Above Manager\")) && (!frm.doc.name_of_the_appraiser)) {\n            frappe.model.get_value('Employee', { 'user_id': frappe.session.user }, 'employee_name',\n                function (data) {\n                    if (data) {\n                        frm.set_value(\"name_of_the_appraiser\", data.employee_name)\n                    }\n                });\n        } else if ((frappe.user.has_role(\"HOD\")) && (!frm.doc.name_of_the_reviewer)) {\n            frappe.model.get_value('Employee', { 'user_id': frappe.session.user }, 'employee_name',\n                function (data) {\n                    if (data) {\n                        frm.set_value(\"name_of_the_reviewer\", data.employee_name)\n                    }\n                });\n        }\n        frm.set_value(\"appraisal_year\", String(new Date().getFullYear() - 1))\n        if (frappe.user.has_role(\"System Manager\")) {\n        }\n        if (frappe.user.has_role(\"One Above Manager\")) {\n            var df = frappe.meta.get_docfield(\"Appraisal Goal\", \"reviewing_officer\", cur_frm.doc.name);\n            df.read_only = 1;\n        }\n        if (frappe.user.has_role(\"HOD\")) {\n            var df = frappe.meta.get_docfield(\"Appraisal Goal\", \"assessing_officer\", cur_frm.doc.name);\n            df.read_only = 1;\n        }\n    },\n    score_conditions: function (frm) {\n        child = frm.doc.goals;\n        if (child) {\n\n            var total = 0;\n            for (var i = 0; i < child.length; i++) {\n                if (child[i].assessing_officer > child[i].per_weightage) {\n                    frappe.msgprint(\"Score Should not greater than Weightage\")\n                    validated = false;\n                }\n                if (child[i].reviewing_officer > child[i].per_weightage) {\n                    frappe.msgprint(\"Score Should not greater than Weightage\")\n                    validated = false;\n                }\n                if (child[i].reviewing_officer < 0) {\n                    frappe.validated = false;\n                    frappe.throw(\"Negative Scores are not Allowed\")\n                }\n                if (child[i].assessing_officer < 0) {\n                    frappe.validated = false;\n                    frappe.throw(\"Negative Scores are not Allowed\")\n\n                }\n                total = total + child[i].reviewing_officer;\n            }\n            frm.set_value(\"total_score_1\", total);\n            var a_total = 0;\n            for (var i = 0; i < child.length; i++) {\n                a_total = a_total + child[i].assessing_officer;\n            }\n            frm.set_value(\"assessing_officer_total\", a_total);\n        }\n    },\n    onload: function (frm) {\n\n        if (frappe.user.has_role(\"HOD\")) {\n            child = frm.doc.goals;\n            if (child) {\n                for (var i = 0; i < child.length; i++) {\n                    $.each(frm.doc.goals || [], function (i, v) {\n                        frappe.model.set_value(v.doctype, v.name, \"reviewing_officer\", child[i].assessing_officer)\n                    })\n                }\n            }\n        }\n        frm.set_query(\"employee\", function () {\n            if (frappe.user.has_role(\"One Above Manager\")) {\n\n                return {\n                    \"filters\": {\n                        \"one_above_manager\": frappe.session.user,\n                        \"category\": 'Non-Management Staff'\n                    }\n                };\n            }\n            else if (frappe.user.has_role(\"HOD\")) {\n\n                return {\n                    \"filters\": {\n                        \"hod\": frappe.session.user,\n                        \"category\": 'Non-Management Staff'\n                    }\n                };\n            }\n            else if (frappe.user.has_role(\"One Above Manager\")) {\n\n                return {\n                    \"filters\": {\n                        \"one_above_manager\": frappe.session.user,\n                        \"category\": 'Non-Management Staff'\n                    }\n                };\n            }\n            else {\n                return {\n                    \"filters\": {\n                        \"category\": 'Non-Management Staff'\n                    }\n                };\n            }\n        })\n    }\n})\nfrappe.ui.form.on(\"Appraisal Goal\", {\n    reviewing_officer: function (frm, cdt, cdn) {\n        var child = locals[cdt][cdn]\n        if (child.reviewing_officer <= child.per_weightage) {\n            frappe.model.set_value(cdt, cdn, \"score\", child.reviewing_officer)\n\n        }\n        frm.trigger(\"score_conditions\")\n\n    },\n    assessing_officer: function (frm, cdt, cdn) {\n        frm.trigger(\"score_conditions\")\n    }\n})", 
  "script_type": "Client"
 }, 
 {
  "docstatus": 0, 
  "doctype": "Custom Script", 
  "dt": "Compensatory Off Application", 
  "modified": "2019-04-24 15:33:43.942822", 
  "name": "Compensatory Off Application-Client", 
  "script": "frappe.ui.form.on(\"Compensatory Off Application\", {\nafter_save:function(frm){\nif(frm.doc.status != 'Approved'){\nfrappe.msgprint(__(\"Compensatory Off Applied Successfully!!!\")) \nsetTimeout(function() { window.history.back(); }, 1000);} \n},\napprover: function(frm) {\n\t\tif(frm.doc.approver){\n\t\t\tfrm.set_value(\"approver_name\", frappe.user.full_name(frm.doc.approver));\n                 \n\t\t}else{\n                  frm.set_value(\"approver_name\",\"\");\n               }\n\t},\nrefresh:function(frm){\nif(frappe.session.user != 'hr.hdi@hunterdouglas.asia'){\n\tif(frm.doc.approver != frappe.session.user){\n     frm.set_df_property(\"status\", \"read_only\",frm.doc.__islocal);\t\n     frm.set_df_property(\"status\", \"read_only\",!frm.doc.__islocal);\n} \n}\n        if(frm.doc.from_date != frm.doc.to_date){\n           frm.trigger(\"session_field\")\n        }\n},\t\n\n\n    onload:function(frm){\n        if(frm.doc.__islocal){\n\t   frm.set_value(\"status\",\"Open\"),\n            frappe.call({\n                method: \"frappe.client.get_value\",\n                args: {\n                    doctype: \"Employee\",\n                    filters: {\"user_id\": frappe.session.user},\n                    fieldname: [\"name\",\"employee_name\",\"grade\",\"location_name\",\"department_code\",\"business_unit\"]\n                },\n                callback: function(r){\n                    if(r.message){\n                        //var la = r.message.leave_approvers\n                        //console.log(r.message.employee_name)\n                        frm.set_value(\"employee\",r.message.name);\n                        frm.set_value(\"employee_name\",r.message.employee_name);\n\t\t\tfrm.set_value(\"grade\",r.message.grade);\n                        frm.set_value(\"location\",r.message.location_name);\n\t\t\tfrm.set_value(\"department\",r.message.department_code);\n                        frm.set_value(\"business_unit\",r.message.business_unit);\n\t\t\tfrm.set_value(\"category\",r.message.category);\n\t\t\tfrappe.call({\n        \t\tmethod: 'frappe.client.get',\n        \t\targs: {\n           \t\t \tdoctype: 'Employee',\n            \t\t\tname: frm.doc.employee\n       \t\t\t\t },\n       \t\t\tcallback: function(r) {\n          \t\t\t var LA = r.message.leave_approvers\n\t   \t\t\t frm.set_value(\"approver\",LA[0].leave_approver)\n       \t\t\t\t}\n      \t\t}) \n\t\t\t\n                        }\n    }\n    });\n    }\n    },\n\nvalidate:function(frm){\n if(frappe.session.user == 'hr.hdi@hunterdouglas.asia'){\n         frm.set_value(\"status\",\"Approved\");\n    }else {\n        frm.set_value(\"status\",\"Applied\");\n\t\n    }\nfrm.trigger(\"mark_half_day\")\n},\nfrom_date_session: function(frm){\nfrm.trigger(\"mark_half_day\")\n},\nto_date_session: function(frm){\nfrm.trigger(\"mark_half_day\")\n},\nmark_half_day: function(frm){\nif(frm.doc.from_date == frm.doc.to_date){\n\tif((frm.doc.from_date_session == \"First Half\") || (frm.doc.from_date_session == \"Second Half\")){\n\tfrm.set_value(\"half_day\", \"1\")\n\tfrm.set_value(\"half_day_date\",frm.doc.from_date)\n}\n} else {\n\tif((frm.doc.from_date_session == \"Full Day\") && (frm.doc.to_date_session == \"First Half\")){\n\tfrm.set_value(\"half_day\", \"1\")\n\tfrm.set_value(\"half_day_date\",frm.doc.to_date)\n       } else if((frm.doc.from_date_session == \"Second Half\") && (frm.doc.to_date_session == \"Full Day\")){\n\tfrm.set_value(\"half_day\", \"1\")\n\tfrm.set_value(\"half_day_date\",frm.doc.from_date)\n}\n}\n},\nfrom_date: function(frm){\n      frm.trigger(\"session_refresh\")\n},\n  to_date:function(frm){\n\tfrm.trigger(\"session_refresh\")\n        frm.trigger(\"session_field\")\n\t//frm.trigger(\"balance_check\")\n },\n  required_balance:function(frm){\nfrm.trigger(\"balance_check\")\n},\n      balance_check:function(frm){\n        if(frm.doc.current_balance < frm.doc.required_balance){\n            frappe.msgprint(__(\"Balance is Less for current Required Hours \"))\n        }\n    },\n    session_refresh:function(frm){\t\n\tfrm.set_value(\"from_date_session\",\"Full Day\")\n\tfrm.set_value(\"to_date_session\",\"Full Day\")\n},\nsession_field: function(frm){\n   \tif(frm.doc.from_date == frm.doc.to_date){\n\tfrm.fields_dict.from_date_session.df.options =['Full Day','First Half','Second Half'].join('\\n')\nrefresh_field(\"from_date_session\");\n        refresh_field(\"to_date_session\");\n\t}\n\tif(frm.doc.from_date != frm.doc.to_date){\n\tfrm.fields_dict.from_date_session.df.options =['Full Day','Second Half'].join('\\n')\n\tfrm.fields_dict.to_date_session.df.options =['Full Day','First Half'].join('\\n')\nrefresh_field(\"from_date_session\");\n        refresh_field(\"to_date_session\");\n\t}\n        \n}\n\n});", 
  "script_type": "Client"
 }, 
 {
  "docstatus": 0, 
  "doctype": "Custom Script", 
  "dt": "Performance Management Reviewer", 
  "modified": "2019-05-01 16:18:56.728582", 
  "name": "Performance Management-Client", 
  "script": "frappe.ui.form.on(\"Performance Management\", {\nonload: function(frm){\nchild = frm.doc.competency_assessment1;\nif(child){\nif (frappe.user.has_role(\"One Above Manager\")) {\n            if (child) {\n                for (var i = 0; i < child.length; i++) {\n                    $.each(frm.doc.competency_assessment1 || [], function (i, v) {\n                        frappe.model.set_value(v.doctype, v.name, \"appraiser_rating\", child[i].appraisee_weightage)\n                    })\n                }\n            }\n}\nif (frappe.user.has_role(\"HOD\")) {\n            if (child) {\n                for (var i = 0; i < child.length; i++) {\n                    $.each(frm.doc.competency_assessment1 || [], function (i, v) {\n                        frappe.model.set_value(v.doctype, v.name, \"hod\", child[i].appraiser_rating)\n                    })\n                }\n            }\n}\nif (frappe.user.has_role(\"Reviewer\")) {\n            if (child) {\n                for (var i = 0; i < child.length; i++) {\n                    $.each(frm.doc.competency_assessment1 || [], function (i, v) {\n                        frappe.model.set_value(v.doctype, v.name, \"reviewer\", child[i].hod)\n                    })\n                }\n            }\n}\n}\nchild1 = frm.doc.key_result_area;\nif(child1){\nif (frappe.user.has_role(\"One Above Manager\")) {\n                for (var i = 0; i < child1.length; i++) {\n                    $.each(frm.doc.key_result_area || [], function (i, v) {\n                        frappe.model.set_value(v.doctype, v.name, \"appraiser_rating_r\", child1[i].self_rating)\n                    })\n                }\n            }\nif (frappe.user.has_role(\"HOD\")) {\n                for (var i = 0; i < child1.length; i++) {\n                    $.each(frm.doc.key_result_area || [], function (i, v) {\n                        frappe.model.set_value(v.doctype, v.name, \"hod\", child1[i].appraiser_rating_r)\n                    })\n                }\n            }\nif (frappe.user.has_role(\"Reviewer\")) {\n                for (var i = 0; i < child1.length; i++) {\n                    $.each(frm.doc.key_result_area || [], function (i, v) {\n                        frappe.model.set_value(v.doctype, v.name, \"reviewer\", child1[i].hod)\n                    })\n                }\n            }\n}\nchild2 = frm.doc.key_results_area;\n            if (child1) {\n                for (var i = 0; i < child1.length; i++) {\n                    $.each(frm.doc.key_results_area || [], function (i, v) {\n                        frappe.model.set_value(v.doctype, v.name, \"appraiser_rating_r\", child1[i].self_rating)\n                    })\n                }\n            }\n}\n})", 
  "script_type": "Client"
 }, 
 {
  "docstatus": 0, 
  "doctype": "Custom Script", 
  "dt": "Performance Management Calibration", 
  "modified": "2019-05-01 18:27:11.529289", 
  "name": "Performance Management Calibration-Client", 
  "script": "", 
  "script_type": "Client"
 }, 
 {
  "docstatus": 0, 
  "doctype": "Custom Script", 
  "dt": "Fetch Attendance", 
  "modified": "2019-06-17 10:28:32.999272", 
  "name": "Fetch Attendance-Client", 
  "script": "frappe.ui.form.on(\"Fetch Attendance\",{\nemployee: function(frm){\nfrappe.call({\nmethod: \"frappe.client.get\",\nargs:{\ndoctype: \"Employee\",\nname: frm.doc.employee\n},\ncallback: function(r){\nfrm.set_value(\"employee_name\",r.message.employee_name)\n}\n})\n}\n})", 
  "script_type": "Client"
 }, 
 {
  "docstatus": 0, 
  "doctype": "Custom Script", 
  "dt": "Leave Application", 
  "modified": "2019-10-30 13:07:20.924533", 
  "name": "Leave Application-Client", 
  "script": "frappe.ui.form.on(\"Leave Application\", {\n    after_save: function (frm) {\n        if (frm.doc.is_from_ar == \"Yes\") {\n            if (frappe.user.has_role(\"Auto Present Employee\")) {\n                list = [\"singh.ak@hunterdouglas.in\", \"sundar@hunterdouglas.in\", \"venkatesh.v@hunterdouglas.in\", \"raghavan.s@hunterdouglas.in\", \"joshy@hunterdouglas.in\", \"udaya.kumar@hunterdouglas.in\", \"ananya.das@hunterdouglas.in\", \"ayushi.roy@hunterdouglas.in\", \"edwin.raj@turnils-mermet.asia\",\n                    \"sanjay.pm@turnils-mermet.asia\", \"ramakrishnan.p@hunterdouglas.in\"]\n                status = \"\"\n                for (var i = 0; i < 11; i++) {\n                    if (status == \"\") {\n                        if (frappe.session.user == list[i]) {\n                            status = \"Yes\"\n                        }\n                    }\n                }\n                if (status == \"Yes\") {\n                    frappe.call({\n                        \"method\": 'hunter_douglas.custom.check_attendance_status',\n                        args: {\n                            \"employee\": frm.doc.employee,\n                            \"from_date\": frm.doc.from_date,\n                            \"to_date\": frm.doc.to_date\n                        },\n                        callback: function (r) {\n                            frappe.msgprint(__(\"Leave Applied/Edited Successfully!!!\"))\n                            frappe.set_route(\"query-report\", \"Attendance recapitulation\")\n                        }\n                    })\n                }\n            } else {\n                frappe.msgprint(__(\"Leave Applied/Edited Successfully!!!\"))\n                frappe.set_route(\"query-report\", \"Attendance recapitulation\")\n            }\n        } else {\n            frappe.msgprint(__(\"Leave Applied/Edited Successfully!!!\"))\n            setTimeout(function () { window.history.back(); }, 1000);\n        }\n\n    },\n    leave_approver: function (frm) {\n        if (frm.doc.leave_approver) {\n            frm.set_value(\"leave_approver_name\", frappe.user.full_name(frm.doc.leave_approver));\n\n        } else {\n            frm.set_value(\"leave_approver\", \"\");\n        }\n    },\n    refresh: function (frm) {\n        if (frappe.session.user != 'hr.hdi@hunterdouglas.asia') {\n            if (frm.doc.leave_approver != frappe.session.user) {\n                frm.set_df_property(\"status\", \"read_only\", frm.doc.__islocal);\n                frm.set_df_property(\"status\", \"read_only\", !frm.doc.__islocal);\n            }\n        }\n        if (frm.doc.from_date != frm.doc.to_date) {\n            frm.trigger(\"session_field\")\n        }\n    },\n    onload: function (frm) {\n        if (frm.doc.__islocal) {\n            frm.set_value(\"status\", \"Open\")\n            if (!frm.doc.employee) {\n                frm.trigger(\"employee_fetch\")\n            }\n        }\n    },\n    // leave_type: function (frm) {\n    //     if (frm.doc.leave_type != \"\") {\n    //         frappe.call({\n    //             method: \"frappe.client.get_value\",\n    //             args: {\n    //                 doctype: \"Leave Allocation\",\n    //                 filters: { \"employee\": frm.doc.employee, \"leave_type\": frm.doc.leave_type },\n    //                 fieldname: [\"total_leaves_allocated\"]\n    //             },\n    //             callback: function (r) {\n    //                 console.log(r.message)\n    //                 if (!r.message) {\n    //                     frappe.msgprint(__(\"There is not enough leave balance for Leave Type\"));\n    //                     frm.set_value('leave_type', \"\")\n\n    //                 }\n    //             }\n    //         });\n    //     }\n    // },\n    employee: function (frm) {\n        frappe.call({\n            method: 'frappe.client.get',\n            args: {\n                doctype: 'Employee',\n                name: frm.doc.employee\n            },\n            callback: function (r) {\n                frm.set_value(\"employee_name\", r.message.employee_name);\n                frm.set_value(\"grade\", r.message.grade);\n                frm.set_value(\"location\", r.message.location_name);\n                frm.set_value(\"department\", r.message.department);\n                frm.set_value(\"business_unit\", r.message.business_unit);\n                frm.set_value(\"category\", r.message.category);\n                var LA = r.message.leave_approvers\n                frm.set_value(\"leave_approver\", LA[0].leave_approver)\n            }\n        })\n    },\n    employee_fetch: function (frm) {\n        frappe.call({\n            method: \"frappe.client.get_value\",\n            args: {\n                doctype: \"Employee\",\n                filters: { \"user_id\": frappe.session.user },\n                fieldname: [\"name\", \"employee_name\", \"grade\", \"location_name\", \"department\", \"business_unit\"]\n            },\n            callback: function (r) {\n                if (r.message) {\n                    frm.set_value(\"employee\", r.message.name);\n                    frm.set_value(\"employee_name\", r.message.employee_name);\n                    frm.set_value(\"grade\", r.message.grade);\n                    frm.set_value(\"location\", r.message.location_name);\n                    frm.set_value(\"department\", r.message.department);\n                    frm.set_value(\"business_unit\", r.message.business_unit);\n                    frm.set_value(\"category\", r.message.category);\n                    frappe.call({\n                        method: 'frappe.client.get',\n                        args: {\n                            doctype: 'Employee',\n                            name: frm.doc.employee\n                        },\n                        callback: function (r) {\n                            var LA = r.message.leave_approvers\n                            frm.set_value(\"leave_approver\", LA[0].leave_approver)\n                        }\n                    })\n\n                }\n            }\n        });\n    },\n    validate_cutoff_date:function(frm){\n        var dt = new Date();\n        var month = dt.getMonth() - 1,\n            year = dt.getFullYear();\n\n        var cut_off_day = new Date(year, month, 25);\n\n        var from_date = new Date(frm.doc.from_date); \n        if(from_date < cut_off_day){\n            frappe.throw(__(\"Salary already processed for this date, Leave application period cannot be between this date range.\"));\n            validated = false;\n        }\n    },\n    from_date: function (frm) {\n        // frm.trigger(\"validate_cutoff_date\")\n        if (frm.doc.leave_type1 && frm.doc.from_date) {\n            frm.trigger(\"session_refresh\")\n            frm.trigger(\"check_leave_type_conditions\")\n        } else if (frm.doc.from_date) {\n            frappe.msgprint(\"Choose the Leave Type First\")\n            if (frm.doc.from_date) {\n                frm.set_value(\"from_date\", \"\")\n            }\n        }\n    },\n    to_date: function (frm) {\n        if (frm.doc.leave_type1 && frm.doc.to_date) {\n            frm.trigger(\"session_refresh\")\n            frm.trigger(\"check_leave_type_conditions\")\n            frm.trigger(\"session_field\")\n        } else if (frm.doc.to_date) {\n            frappe.msgprint(\"Choose the Leave Type First\")\n            if (frm.doc.to_date) {\n                frm.set_value(\"to_date\", \"\")\n            }\n        }\n\n    },\n    session_refresh: function (frm) {\n        frm.set_value(\"from_date_session\", \"Full Day\")\n        frm.set_value(\"to_date_session\", \"Full Day\")\n    },\n    session_field: function (frm) {\n        if (frm.doc.from_date == frm.doc.to_date) {\n            frm.fields_dict.from_date_session.df.options = ['Full Day', 'First Half', 'Second Half'].join('\\n')\n            refresh_field(\"from_date_session\");\n            refresh_field(\"to_date_session\");\n        }\n        if (frm.doc.from_date != frm.doc.to_date) {\n            frm.fields_dict.from_date_session.df.options = ['Full Day', 'Second Half'].join('\\n')\n            frm.fields_dict.to_date_session.df.options = ['Full Day', 'First Half'].join('\\n')\n            refresh_field(\"from_date_session\");\n            refresh_field(\"to_date_session\");\n        }\n\n    },\n    from_date_session: function (frm) {\n        if (frm.doc.from_date == frm.doc.to_date) {\n            frm.set_value(\"to_date_session\", frm.doc.from_date_session)\n        }\n    },\n    to_date_session: function (frm) {\n        if (frm.doc.from_date == frm.doc.to_date) {\n            frm.set_value(\"from_date_session\", frm.doc.to_date_session)\n        }\n    },\n    leave_type1: function (frm) {\n        if (frm.doc.leave_type1) {\n            frm.set_value(\"leave_type\", frm.doc.leave_type1);\n        }\n    },\n    validate: function (frm) {\n        frm.trigger(\"check_leave_type_conditions\")\n\tif (frm.doc.leave_type == \"Privilege Leave\") {\n                if (frm.doc.total_leave_days == 0.5) {\n                    frappe.msgprint(\"Half a day Leave not applicable for \" + frm.doc.leave_type);\n                    frappe.validated = false;\n                }\n            }\n        if (frm.doc.from_date) {\n            var date = new Date(frm.doc.from_date)\n            var year = date.getFullYear()\n            if (year == \"2018\") {\n                frappe.msgprint(\"Contact Administrator\");\n                validated = false;\n            }\n        }\n        if (frm.doc.from_date == frm.doc.to_date) {\n            if ((frm.doc.from_date_session == \"First Half\") || (frm.doc.from_date_session == \"Second Half\")) {\n                frm.set_value(\"half_day\", \"1\")\n                frm.set_value(\"half_day_date\", frm.doc.from_date)\n            }\n        } else {\n            if ((frm.doc.from_date_session == \"Full Day\") && (frm.doc.to_date_session == \"First Half\")) {\n                frm.set_value(\"half_day\", \"1\")\n                frm.set_value(\"half_day_date\", frm.doc.to_date)\n            } else if ((frm.doc.from_date_session == \"Second Half\") && (frm.doc.to_date_session == \"Full Day\")) {\n                frm.set_value(\"half_day\", \"1\")\n                frm.set_value(\"half_day_date\", frm.doc.from_date)\n            }\n        }\n        if (frappe.session.user == 'hr.hdi@hunterdouglas.asia') {\n            frm.set_value(\"status\", \"Approved\");\n            //if(frm.doc.docstatus == 0){\n            //frm.save('Submit');\n            //}\n\n        } else if (frappe.session.user != frm.doc.leave_approver) {\n            frm.set_value(\"status\", \"Applied\");\n\n        }\n        if (frm.doc.from_date) {\n            var from_date = new Date(frm.doc.from_date);\n            var to_date = new Date(frm.doc.to_date);\n            var diff_days = ((to_date.getDate() - from_date.getDate()) + 1);\n            if (frm.doc.leave_type == \"Privilege Leave\") {\n                if (frm.doc.total_leave_days == 0.5) {\n                    frappe.msgprint(\"Half a day Leave not applicable for \" + frm.doc.leave_type);\n                    frappe.validated = false;\n                }\n            }\n        }\n    },\n    check_leave_type_conditions: function (frm) {\n        if ((frm.doc.from_date) && (frm.doc.to_date)) {\n            var date_diff = frappe.datetime.get_diff(frm.doc.to_date, frm.doc.from_date) + 1\n            frm.set_value(\"total_leave_days\", date_diff);\n        }\n        //if((frm.doc.leave_type1 == \"Privilege Leave\") && (frm.doc.leave_type == \"Privilege Leave\") //&& ((frm.doc.from_date) && (frm.doc.to_date))){\n\n        //   /* if(frm.doc.total_leave_days < ){\n        //       frappe.msgprint(\"PL must be more than 3 Days\");\n        //       frm.set_value(\"from_date\",\"\");\n        //       frm.set_value(\"to_date\",\"\");\n        //     frm.set_value(\"total_leave_days\",\"\")\n        //       frappe.validated = false;\n\n        //    }\n        //}\n        if (frm.doc.leave_type == \"Casual Leave\") {\n            var from_date = new Date(frm.doc.from_date);\n            var to_date = new Date(frm.doc.to_date);\n            var diff_days = ((to_date.getDate() - from_date.getDate()) + 1);\n            if (diff_days > 2) {\n                frappe.msgprint(\"Maximum 2 Days Only Allowed for Casual Leave\");\n                frappe.validated = false;\n                frm.set_value(\"from_date\", \"\");\n                frm.set_value(\"to_date\", \"\");\n                frm.set_value(\"total_leave_days\", \"\")\n            }\n        }\n\n        if (frm.doc.leave_type == \"Sick Leave\") {\n            if (frm.doc.total_leave_days >= 2) {\n                var attachments = this.get_attachments();\n                if (!attachments) {\n                    frappe.msgprint(\"Advice to attach Medical Ceritificate\")\n                    frappe.validated = false;\n                }\n            }\n            var tld = 0;\n            var date = new Date(frm.doc.from_date);\n            var year = date.getFullYear()\n            frappe.call({\n                \"method\": \"frappe.client.get_list\",\n                \"args\": {\n                    \"doctype\": \"Leave Application\",\n                    \"filters\": { \"employee\": frm.doc.employee, \"leave_type\": \"Sick Leave\" }\n                },\n                callback: function (r) {\n                    if (r.message) {\n                        $.each(r.message, function (i, d) {\n                            frappe.call({\n                                \"method\": \"frappe.client.get\",\n                                args: {\n                                    \"doctype\": \"Leave Application\",\n                                    \"name\": d.name\n                                },\n                                callback: function (r) {\n                                    if (r.message) {\n                                        tld += r.message.total_leave_days\n                                        var from_date = new Date(frm.doc.from_date);\n                                        var to_date = new Date(frm.doc.to_date);\n                                        var diff_days = ((to_date.getDate() - from_date.getDate()) + 1);\n                                        var total = tld + diff_days\n                                        //if(total > 6){\n                                        //frappe.msgprint(\"Maximum Days has been reached for Sick Leaves(for this Year)\");\n                                        //frappe.validated = false;\n                                        //\t\tfrm.set_value(\"from_date\",\"\");\n                                        //\t\t\tfrm.set_value(\"to_date\",\"\");\n                                        //\t\t\t\tfrm.set_value(\"total_leave_days\",\"\")\n                                        // }\n                                    }\n                                }\n                            })\n                        })\n                    }\n                }\n            })\n        }\n    }\n});", 
  "script_type": "Client"
<<<<<<< HEAD
=======
 }, 
 {
  "docstatus": 0, 
  "doctype": "Custom Script", 
  "dt": "Manpower Requisition Request", 
  "modified": "2020-12-02 15:26:49.051288", 
  "name": "Manpower Requisition Request-Client", 
  "script": "frappe.ui.form.on('Manpower Requisition Request', {\nrefresh: function (frm, cdt, cdn) {\nfrm.add_custom_button(__(\"Print\"), function () {\n                var f_name = frm.doc.name\n                var print_format =\"Manpower Requisition\";\n          window.open(frappe.urllib.get_full_url(\"/api/method/frappe.utils.print_format.download_pdf?\"\n                    + \"doctype=\" + encodeURIComponent(\"Manpower Requisition Request\")\n                    + \"&name=\" + encodeURIComponent(f_name)\n                    + \"&trigger_print=1\"\n                    + \"&format=\" + print_format\n                    + \"&no_letterhead=0\"\n                   ));\n            \n\n            })\n}\n})", 
  "script_type": "Client"
 }, 
 {
  "docstatus": 0, 
  "doctype": "Custom Script", 
  "dt": "Employee Induction", 
  "modified": "2020-12-18 13:22:14.125771", 
  "name": "Employee Induction-Client", 
  "script": "frappe.ui.form.on('Employee Induction', {\n\nafter_save(frm){\n\nfrm.add_custom_button(__(\"Initiate Test\"), function () {\n  \nfrappe.call({\nmethod: \"hunter_douglas.hunter_douglas.doctype.employee_induction.employee_induction.create_questions_entry\",\n\t\t\targs: {\n\t\t\t\t\"employee_id\": frm.doc.employee_id,\n                                \"email_id\":frm.doc.email_id,\n                                 \n                         }\n                      \n\t\t\t});\n\n              \n                })\n\n                 \n    }\n})", 
  "script_type": "Client"
 }, 
 {
  "docstatus": 0, 
  "doctype": "Custom Script", 
  "dt": "Clearance Certificate", 
  "modified": "2020-12-21 16:44:06.544831", 
  "name": "Clearance Certificate-Client", 
  "script": "frappe.ui.form.on('Clearance Certificate', {\nrefresh: function (frm) {\n\n\n\t\t\tfrm.add_custom_button(__(\"Print\"), function () {\n\t\t\t\tvar f_name = frm.doc.name\n\t\t\t\tvar print_format = \"Clearance Certificate\";\n\t\t\t\twindow.open(frappe.urllib.get_full_url(\"/api/method/frappe.utils.print_format.download_pdf?\"\n\t\t\t\t\t+ \"doctype=\" + encodeURIComponent(\"Clearance Certificate\")\n\t\t\t\t\t+ \"&name=\" + encodeURIComponent(f_name)\n\t\t\t\t\t+ \"&trigger_print=1\"\n\t\t\t\t\t+ \"&format=\" + print_format\n\t\t\t\t\t+ \"&no_letterhead=0\"\n\t\t\t\t));\n\n\t\t\t})\n}\n})", 
  "script_type": "Client"
 }, 
 {
  "docstatus": 0, 
  "doctype": "Custom Script", 
  "dt": "Exit Interview Questionnaire", 
  "modified": "2020-12-21 18:35:51.076251", 
  "name": "Exit Interview Questionnaire-Client", 
  "script": "frappe.ui.form.on('Exit Interview Questionnaire', {\nrefresh: function (frm) {\n\n\n\t\t\tfrm.add_custom_button(__(\"Print\"), function () {\n\t\t\t\tvar f_name = frm.doc.name\n\t\t\t\tvar print_format = \"Exit Interview Questionnaire\";\n\t\t\t\twindow.open(frappe.urllib.get_full_url(\"/api/method/frappe.utils.print_format.download_pdf?\"\n\t\t\t\t\t+ \"doctype=\" + encodeURIComponent(\"Exit Interview Questionnaire\")\n\t\t\t\t\t+ \"&name=\" + encodeURIComponent(f_name)\n\t\t\t\t\t+ \"&trigger_print=1\"\n\t\t\t\t\t+ \"&format=\" + print_format\n\t\t\t\t\t+ \"&no_letterhead=0\"\n\t\t\t\t));\n\n\t\t\t})\n}\n})", 
  "script_type": "Client"
>>>>>>> 7326702e0fb20d5d79f1197efee756a29a62c7cc
 }
]